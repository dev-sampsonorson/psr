import { Component } from '@angular/core';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/router";
import * as i3 from "../../services";
import * as i4 from "@skilllib";
import * as i5 from "@sharedlib";
export class SkillAddComponent {
    constructor(fb, route, router, skillService, skillFormService, alert) {
        this.fb = fb;
        this.route = route;
        this.router = router;
        this.skillService = skillService;
        this.skillFormService = skillFormService;
        this.alert = alert;
        this.title = 'Add New Skill';
        this.description = 'Provide details about the skill.';
        this.buttonLabel = 'Add skill';
        this.categories = [];
        this.subCategories = [];
        this.formIsValid = false;
        this.isSubcategoryDisabled = true;
    }
    ngOnInit() {
        // get the categories ids
        // get the skill
        // update the skill with category and subcategory
        // emit new object with categories and skill using map
        this.route.params.pipe(switchMap(({ categoryId, subcategoryId }) => {
            return this.route.data.pipe(map(({ categories, skill }) => {
                // skill.categoryId = categoryId;
                // skill.subcategoryId = subcategoryId;
                return {
                    categories,
                    skill: Object.assign(Object.assign({}, skill), { categoryId, subcategoryId })
                };
            }));
        })).subscribe(({ categories, skill }) => {
            this.categories = categories;
            this.skill = skill;
        });
    }
    onSaveSkill(skill) {
        this.skillService.addSkill(skill).subscribe({
            next: (response) => {
                // tell the list component that skill has been added
                this.skillService.notifySkillSave(response);
                this.skillFormService.resetForm();
                this.alert.success('Successful', 'Skill has been added successfully');
            },
            error: (error) => {
                this.alert.error('Save Failed', 'Unable to add new skill');
            }
        });
    }
    onCloseClick() {
        this.router.navigate(['/skills', { outlets: { details: null } }]);
    }
    ngOnDestroy() {
        var _a, _b;
        (_a = this._categoryValueChangeSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this._formStatusChangeSub) === null || _b === void 0 ? void 0 : _b.unsubscribe();
    }
}
SkillAddComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: SkillAddComponent, deps: [{ token: i1.FormBuilder }, { token: i2.ActivatedRoute }, { token: i2.Router }, { token: i3.SkillMgtService }, { token: i4.SkillFormService }, { token: i5.AlertService }], target: i0.ɵɵFactoryTarget.Component });
SkillAddComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.11", type: SkillAddComponent, selector: "app-skill-add", ngImport: i0, template: "<app-secondary-header [title]=\"title\" [description]=\"description\" (closeClick)=\"onCloseClick()\"></app-secondary-header>\n\n<skl-form [skill]=\"skill\" [categories]=\"categories\" (commitSkill)=\"onSaveSkill($event)\" [buttonLabel]=\"buttonLabel\">\n</skl-form>\n\n\n<!-- <div class=\"flex flex-col py-5 space-y-6 border-t border-gray-200\">\n    <ng-container *ngIf=\"form\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"addSkill()\" class=\"psr-form__form\">\n            <div>\n                <label class=\"psr-form__label\" for=\"name\">Skill name</label>\n                <input formControlName=\"name\" id=\"name\" name=\"name\" type=\"text\"\n                       class=\"psr-form__field psr-form__field--alt\" placeholder=\"\" />\n            </div>\n            <div>\n                <label class=\"psr-form__label\" for=\"category\">Category</label>\n                <select formControlName=\"category\" (change)=\"onCategoryChange()\" id=\"category\" name=\"category\"\n                        class=\"psr-form__select psr-form__select--alt\">\n                    <option value=\"\" selected> -- </option>\n                    <option [value]=\"category.id\" *ngFor=\"let category of categories\">{{ category.name }}</option>\n                </select>\n            </div>\n            <div>\n                <label class=\"psr-form__label\" for=\"sub-category\">Sub category</label>\n                <select formControlName=\"subCategory\" [disableControl]=\"isSubcategoryDisabled\" id=\"sub-category\"\n                        name=\"sub-category\" class=\"psr-form__select psr-form__select--alt\">\n                    <option value=\"\" selected> -- </option>\n                    <option [value]=\"subCategory.id\" *ngFor=\"let subCategory of subCategories\">{{ subCategory.name }}\n                    </option>\n                </select>\n            </div>\n            <div>\n                <button [disabled]=\"!formIsValid\" class=\"psr-form__button\" type=\"submit\">\n                    Add skill\n                </button>\n            </div>\n        </form>\n    </ng-container>\n</div> -->\n", styles: [":host{display:block}\n"], components: [{ type: i5.SecondaryHeaderComponent, selector: "app-secondary-header", inputs: ["title", "description"], outputs: ["closeClick"] }, { type: i4.SkillFormComponent, selector: "skl-form", inputs: ["categories", "subcategories", "buttonLabel", "skill"], outputs: ["commitSkill"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: SkillAddComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-skill-add',
                    templateUrl: './skill-add.component.html',
                    styleUrls: ['./skill-add.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: i3.SkillMgtService }, { type: i4.SkillFormService }, { type: i5.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpbGwtYWRkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NraWxsbWd0bGliL3NyYy9saWIvY29tcG9uZW50cy9za2lsbC1hZGQvc2tpbGwtYWRkLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NraWxsbWd0bGliL3NyYy9saWIvY29tcG9uZW50cy9za2lsbC1hZGQvc2tpbGwtYWRkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBTTdELE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7QUFTaEQsTUFBTSxPQUFPLGlCQUFpQjtJQWUxQixZQUNZLEVBQWUsRUFDZixLQUFxQixFQUNyQixNQUFjLEVBQ2QsWUFBNkIsRUFDN0IsZ0JBQWtDLEVBQ2xDLEtBQW1CO1FBTG5CLE9BQUUsR0FBRixFQUFFLENBQWE7UUFDZixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsaUJBQVksR0FBWixZQUFZLENBQWlCO1FBQzdCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsVUFBSyxHQUFMLEtBQUssQ0FBYztRQW5CeEIsVUFBSyxHQUFXLGVBQWUsQ0FBQztRQUNoQyxnQkFBVyxHQUFXLGtDQUFrQyxDQUFDO1FBQ3pELGdCQUFXLEdBQVcsV0FBVyxDQUFDO1FBR2xDLGVBQVUsR0FBcUIsRUFBRSxDQUFDO1FBQ2xDLGtCQUFhLEdBQXdCLEVBQUUsQ0FBQztRQUN4QyxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQUM3QiwwQkFBcUIsR0FBWSxJQUFJLENBQUM7SUFjN0MsQ0FBQztJQUVELFFBQVE7UUFDSix5QkFBeUI7UUFDekIsZ0JBQWdCO1FBQ2hCLGlEQUFpRDtRQUNqRCxzREFBc0Q7UUFFdEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNsQixTQUFTLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO1lBQ3hDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUN2QixHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO2dCQUMxQixpQ0FBaUM7Z0JBQ2pDLHVDQUF1QztnQkFFdkMsT0FBTztvQkFDSCxVQUFVO29CQUNWLEtBQUssa0NBQU8sS0FBSyxLQUFFLFVBQVUsRUFBRSxhQUFhLEdBQUU7aUJBQ2pELENBQUM7WUFDTixDQUFDLENBQUMsQ0FDTCxDQUFBO1FBQ0wsQ0FBQyxDQUFDLENBQ0wsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1lBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELFdBQVcsQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUN4QyxJQUFJLEVBQUUsQ0FBQyxRQUFnQixFQUFFLEVBQUU7Z0JBQ3ZCLG9EQUFvRDtnQkFDcEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzVDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ2QsWUFBWSxFQUNaLG1DQUFtQyxDQUN0QyxDQUFDO1lBQ04sQ0FBQztZQUNELEtBQUssRUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDWixhQUFhLEVBQ2IseUJBQXlCLENBQzVCLENBQUM7WUFDTixDQUFDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFlBQVk7UUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsV0FBVzs7UUFDUCxNQUFBLElBQUksQ0FBQyx1QkFBdUIsMENBQUUsV0FBVyxFQUFFLENBQUM7UUFDNUMsTUFBQSxJQUFJLENBQUMsb0JBQW9CLDBDQUFFLFdBQVcsRUFBRSxDQUFDO0lBQzdDLENBQUM7OytHQTlFUSxpQkFBaUI7bUdBQWpCLGlCQUFpQixxRENmOUIsMGxFQXVDQTs0RkR4QmEsaUJBQWlCO2tCQUw3QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxlQUFlO29CQUN6QixXQUFXLEVBQUUsNEJBQTRCO29CQUN6QyxTQUFTLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQztpQkFDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICdAc2hhcmVkbGliJztcbmltcG9ydCB7IElTa2lsbCwgSVNraWxsQ2F0ZWdvcnksIElTa2lsbFN1YkNhdGVnb3J5LCBTa2lsbEZvcm1TZXJ2aWNlIH0gZnJvbSAnQHNraWxsbGliJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFNraWxsTWd0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhcHAtc2tpbGwtYWRkJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2tpbGwtYWRkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9za2lsbC1hZGQuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTa2lsbEFkZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nID0gJ0FkZCBOZXcgU2tpbGwnO1xuICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nID0gJ1Byb3ZpZGUgZGV0YWlscyBhYm91dCB0aGUgc2tpbGwuJztcbiAgICBwdWJsaWMgYnV0dG9uTGFiZWw6IHN0cmluZyA9ICdBZGQgc2tpbGwnO1xuICAgIHB1YmxpYyBmb3JtOiBGb3JtR3JvdXAgfCB1bmRlZmluZWQ7XG4gICAgcHVibGljIHNraWxsOiBJU2tpbGwgfCB1bmRlZmluZWQ7XG4gICAgcHVibGljIGNhdGVnb3JpZXM6IElTa2lsbENhdGVnb3J5W10gPSBbXTtcbiAgICBwdWJsaWMgc3ViQ2F0ZWdvcmllczogSVNraWxsU3ViQ2F0ZWdvcnlbXSA9IFtdO1xuICAgIHB1YmxpYyBmb3JtSXNWYWxpZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBpc1N1YmNhdGVnb3J5RGlzYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgcHJpdmF0ZSBfY2F0ZWdvcnlWYWx1ZUNoYW5nZVN1YjogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX2Zvcm1TdGF0dXNDaGFuZ2VTdWI6IFN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGZiOiBGb3JtQnVpbGRlcixcbiAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgc2tpbGxTZXJ2aWNlOiBTa2lsbE1ndFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgc2tpbGxGb3JtU2VydmljZTogU2tpbGxGb3JtU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlXG5cbiAgICApIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgLy8gZ2V0IHRoZSBjYXRlZ29yaWVzIGlkc1xuICAgICAgICAvLyBnZXQgdGhlIHNraWxsXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgc2tpbGwgd2l0aCBjYXRlZ29yeSBhbmQgc3ViY2F0ZWdvcnlcbiAgICAgICAgLy8gZW1pdCBuZXcgb2JqZWN0IHdpdGggY2F0ZWdvcmllcyBhbmQgc2tpbGwgdXNpbmcgbWFwXG5cbiAgICAgICAgdGhpcy5yb3V0ZS5wYXJhbXMucGlwZShcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoeyBjYXRlZ29yeUlkLCBzdWJjYXRlZ29yeUlkIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb3V0ZS5kYXRhLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoeyBjYXRlZ29yaWVzLCBza2lsbCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBza2lsbC5jYXRlZ29yeUlkID0gY2F0ZWdvcnlJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNraWxsLnN1YmNhdGVnb3J5SWQgPSBzdWJjYXRlZ29yeUlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGw6IHsgLi4uc2tpbGwsIGNhdGVnb3J5SWQsIHN1YmNhdGVnb3J5SWQgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICApLnN1YnNjcmliZSgoeyBjYXRlZ29yaWVzLCBza2lsbCB9KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuICAgICAgICAgICAgdGhpcy5za2lsbCA9IHNraWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25TYXZlU2tpbGwoc2tpbGw6IElTa2lsbCkge1xuICAgICAgICB0aGlzLnNraWxsU2VydmljZS5hZGRTa2lsbChza2lsbCkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6IChyZXNwb25zZTogSVNraWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gdGVsbCB0aGUgbGlzdCBjb21wb25lbnQgdGhhdCBza2lsbCBoYXMgYmVlbiBhZGRlZFxuICAgICAgICAgICAgICAgIHRoaXMuc2tpbGxTZXJ2aWNlLm5vdGlmeVNraWxsU2F2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5za2lsbEZvcm1TZXJ2aWNlLnJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWxlcnQuc3VjY2VzcyhcbiAgICAgICAgICAgICAgICAgICAgJ1N1Y2Nlc3NmdWwnLFxuICAgICAgICAgICAgICAgICAgICAnU2tpbGwgaGFzIGJlZW4gYWRkZWQgc3VjY2Vzc2Z1bGx5J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGVydC5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ1NhdmUgRmFpbGVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBhZGQgbmV3IHNraWxsJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQ2xvc2VDbGljaygpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvc2tpbGxzJywgeyBvdXRsZXRzOiB7IGRldGFpbHM6IG51bGwgfSB9XSk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2NhdGVnb3J5VmFsdWVDaGFuZ2VTdWI/LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuX2Zvcm1TdGF0dXNDaGFuZ2VTdWI/LnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuIiwiPGFwcC1zZWNvbmRhcnktaGVhZGVyIFt0aXRsZV09XCJ0aXRsZVwiIFtkZXNjcmlwdGlvbl09XCJkZXNjcmlwdGlvblwiIChjbG9zZUNsaWNrKT1cIm9uQ2xvc2VDbGljaygpXCI+PC9hcHAtc2Vjb25kYXJ5LWhlYWRlcj5cblxuPHNrbC1mb3JtIFtza2lsbF09XCJza2lsbFwiIFtjYXRlZ29yaWVzXT1cImNhdGVnb3JpZXNcIiAoY29tbWl0U2tpbGwpPVwib25TYXZlU2tpbGwoJGV2ZW50KVwiIFtidXR0b25MYWJlbF09XCJidXR0b25MYWJlbFwiPlxuPC9za2wtZm9ybT5cblxuXG48IS0tIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY29sIHB5LTUgc3BhY2UteS02IGJvcmRlci10IGJvcmRlci1ncmF5LTIwMFwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJmb3JtXCI+XG4gICAgICAgIDxmb3JtIFtmb3JtR3JvdXBdPVwiZm9ybVwiIChuZ1N1Ym1pdCk9XCJhZGRTa2lsbCgpXCIgY2xhc3M9XCJwc3ItZm9ybV9fZm9ybVwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJwc3ItZm9ybV9fbGFiZWxcIiBmb3I9XCJuYW1lXCI+U2tpbGwgbmFtZTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0IGZvcm1Db250cm9sTmFtZT1cIm5hbWVcIiBpZD1cIm5hbWVcIiBuYW1lPVwibmFtZVwiIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJwc3ItZm9ybV9fZmllbGQgcHNyLWZvcm1fX2ZpZWxkLS1hbHRcIiBwbGFjZWhvbGRlcj1cIlwiIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwicHNyLWZvcm1fX2xhYmVsXCIgZm9yPVwiY2F0ZWdvcnlcIj5DYXRlZ29yeTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBmb3JtQ29udHJvbE5hbWU9XCJjYXRlZ29yeVwiIChjaGFuZ2UpPVwib25DYXRlZ29yeUNoYW5nZSgpXCIgaWQ9XCJjYXRlZ29yeVwiIG5hbWU9XCJjYXRlZ29yeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInBzci1mb3JtX19zZWxlY3QgcHNyLWZvcm1fX3NlbGVjdC0tYWx0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIiBzZWxlY3RlZD4gLS0gPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gW3ZhbHVlXT1cImNhdGVnb3J5LmlkXCIgKm5nRm9yPVwibGV0IGNhdGVnb3J5IG9mIGNhdGVnb3JpZXNcIj57eyBjYXRlZ29yeS5uYW1lIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwicHNyLWZvcm1fX2xhYmVsXCIgZm9yPVwic3ViLWNhdGVnb3J5XCI+U3ViIGNhdGVnb3J5PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8c2VsZWN0IGZvcm1Db250cm9sTmFtZT1cInN1YkNhdGVnb3J5XCIgW2Rpc2FibGVDb250cm9sXT1cImlzU3ViY2F0ZWdvcnlEaXNhYmxlZFwiIGlkPVwic3ViLWNhdGVnb3J5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJzdWItY2F0ZWdvcnlcIiBjbGFzcz1cInBzci1mb3JtX19zZWxlY3QgcHNyLWZvcm1fX3NlbGVjdC0tYWx0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIiBzZWxlY3RlZD4gLS0gPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gW3ZhbHVlXT1cInN1YkNhdGVnb3J5LmlkXCIgKm5nRm9yPVwibGV0IHN1YkNhdGVnb3J5IG9mIHN1YkNhdGVnb3JpZXNcIj57eyBzdWJDYXRlZ29yeS5uYW1lIH19XG4gICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gW2Rpc2FibGVkXT1cIiFmb3JtSXNWYWxpZFwiIGNsYXNzPVwicHNyLWZvcm1fX2J1dHRvblwiIHR5cGU9XCJzdWJtaXRcIj5cbiAgICAgICAgICAgICAgICAgICAgQWRkIHNraWxsXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgIDwvbmctY29udGFpbmVyPlxuPC9kaXY+IC0tPlxuIl19