import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { IAppConfig, ILookupItem, LookupService } from '@corelib';
import { AlertService } from '@sharedlib';
import { AuthValidatorsService } from '../../services/auth-validators.service';
import { AuthService } from '../../services/auth.service';
import * as i0 from "@angular/core";
export declare class RegisterComponent implements OnInit, OnDestroy {
    private auth;
    private fb;
    private validators;
    private lookupService;
    private alert;
    private router;
    private appConfig;
    passwordChange: EventEmitter<string>;
    form: FormGroup;
    countries: ILookupItem[];
    formIsValid: boolean;
    private debouncer$;
    private registerSub;
    private formStatusSub;
    constructor(auth: AuthService, fb: FormBuilder, validators: AuthValidatorsService, lookupService: LookupService, alert: AlertService, router: Router, appConfig: IAppConfig);
    ngOnInit(): void;
    registerEmployee(): void;
    onPasswordChange(e: Event): void;
    isInvalid(control: FormControl, validation?: string | undefined): boolean | "" | undefined;
    get emailControl(): FormControl;
    get passwordControl(): FormControl;
    get confirmPasswordControl(): FormControl;
    get firstNameControl(): FormControl;
    get lastNameControl(): FormControl;
    get countryControl(): FormControl;
    get timezoneControl(): FormControl;
    get workHoursControl(): FormControl;
    get coreHoursControl(): FormControl;
    createForm(): void;
    gotoLogin(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RegisterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RegisterComponent, "app-register", never, {}, { "passwordChange": "passwordChange"; }, never, never>;
}
