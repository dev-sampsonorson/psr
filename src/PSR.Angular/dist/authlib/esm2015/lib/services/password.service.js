import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class PasswordService {
    constructor() { }
    checkStrength(password) {
        /* if (!password)
            return 0; */
        // 1
        let force = 0;
        // 2
        const regex = /[$-/:-?{-~!"^_@`\[\]]/g;
        const lowerLetters = /[a-z]+/.test(password);
        const upperLetters = /[A-Z]+/.test(password);
        const numbers = /[0-9]+/.test(password);
        const symbols = regex.test(password);
        // 3
        const flags = [lowerLetters, upperLetters, numbers, symbols];
        // 4
        let passedMatches = 0;
        for (const flag of flags) {
            passedMatches += flag === true ? 1 : 0;
        }
        // 5
        force += 2 * password.length + ((password.length >= 10) ? 1 : 0);
        force += passedMatches * 10;
        // 6
        force = (password.length <= 8) ? Math.min(force, 10) : force;
        // 7
        force = (passedMatches === 1) ? Math.min(force, 10) : force;
        force = (passedMatches === 2) ? Math.min(force, 20) : force;
        force = (passedMatches === 3) ? Math.min(force, 30) : force;
        force = (passedMatches === 4) ? Math.min(force, 40) : force;
        return force;
    }
}
PasswordService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: PasswordService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
PasswordService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: PasswordService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: PasswordService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2F1dGhsaWIvc3JjL2xpYi9zZXJ2aWNlcy9wYXNzd29yZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU0sT0FBTyxlQUFlO0lBRXhCLGdCQUFnQixDQUFDO0lBRWpCLGFBQWEsQ0FBQyxRQUFnQjtRQUMxQjt3QkFDZ0I7UUFFaEIsSUFBSTtRQUNKLElBQUksS0FBSyxHQUFXLENBQUMsQ0FBQztRQUV0QixJQUFJO1FBQ0osTUFBTSxLQUFLLEdBQVcsd0JBQXdCLENBQUM7UUFDL0MsTUFBTSxZQUFZLEdBQVksUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RCxNQUFNLFlBQVksR0FBWSxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sT0FBTyxHQUFZLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakQsTUFBTSxPQUFPLEdBQVksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5QyxJQUFJO1FBQ0osTUFBTSxLQUFLLEdBQWMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV4RSxJQUFJO1FBQ0osSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3RCLGFBQWEsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMxQztRQUVELElBQUk7UUFDSixLQUFLLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakUsS0FBSyxJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFFNUIsSUFBSTtRQUNKLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFN0QsSUFBSTtRQUNKLEtBQUssR0FBRyxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUM1RCxLQUFLLEdBQUcsQ0FBQyxhQUFhLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDNUQsS0FBSyxHQUFHLENBQUMsYUFBYSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzVELEtBQUssR0FBRyxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUU1RCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs2R0F6Q1EsZUFBZTtpSEFBZixlQUFlLGNBRlosTUFBTTs0RkFFVCxlQUFlO2tCQUgzQixVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIGNoZWNrU3RyZW5ndGgocGFzc3dvcmQ6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgLyogaWYgKCFwYXNzd29yZClcclxuICAgICAgICAgICAgcmV0dXJuIDA7ICovXHJcblxyXG4gICAgICAgIC8vIDFcclxuICAgICAgICBsZXQgZm9yY2U6IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgIC8vIDJcclxuICAgICAgICBjb25zdCByZWdleDogUmVnRXhwID0gL1skLS86LT97LX4hXCJeX0BgXFxbXFxdXS9nO1xyXG4gICAgICAgIGNvbnN0IGxvd2VyTGV0dGVyczogYm9vbGVhbiA9IC9bYS16XSsvLnRlc3QocGFzc3dvcmQpO1xyXG4gICAgICAgIGNvbnN0IHVwcGVyTGV0dGVyczogYm9vbGVhbiA9IC9bQS1aXSsvLnRlc3QocGFzc3dvcmQpO1xyXG4gICAgICAgIGNvbnN0IG51bWJlcnM6IGJvb2xlYW4gPSAvWzAtOV0rLy50ZXN0KHBhc3N3b3JkKTtcclxuICAgICAgICBjb25zdCBzeW1ib2xzOiBib29sZWFuID0gcmVnZXgudGVzdChwYXNzd29yZCk7XHJcblxyXG4gICAgICAgIC8vIDNcclxuICAgICAgICBjb25zdCBmbGFnczogYm9vbGVhbltdID0gW2xvd2VyTGV0dGVycywgdXBwZXJMZXR0ZXJzLCBudW1iZXJzLCBzeW1ib2xzXTtcclxuXHJcbiAgICAgICAgLy8gNFxyXG4gICAgICAgIGxldCBwYXNzZWRNYXRjaGVzID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IGZsYWcgb2YgZmxhZ3MpIHtcclxuICAgICAgICAgICAgcGFzc2VkTWF0Y2hlcyArPSBmbGFnID09PSB0cnVlID8gMSA6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyA1XHJcbiAgICAgICAgZm9yY2UgKz0gMiAqIHBhc3N3b3JkLmxlbmd0aCArICgocGFzc3dvcmQubGVuZ3RoID49IDEwKSA/IDEgOiAwKTtcclxuICAgICAgICBmb3JjZSArPSBwYXNzZWRNYXRjaGVzICogMTA7XHJcblxyXG4gICAgICAgIC8vIDZcclxuICAgICAgICBmb3JjZSA9IChwYXNzd29yZC5sZW5ndGggPD0gOCkgPyBNYXRoLm1pbihmb3JjZSwgMTApIDogZm9yY2U7XHJcblxyXG4gICAgICAgIC8vIDdcclxuICAgICAgICBmb3JjZSA9IChwYXNzZWRNYXRjaGVzID09PSAxKSA/IE1hdGgubWluKGZvcmNlLCAxMCkgOiBmb3JjZTtcclxuICAgICAgICBmb3JjZSA9IChwYXNzZWRNYXRjaGVzID09PSAyKSA/IE1hdGgubWluKGZvcmNlLCAyMCkgOiBmb3JjZTtcclxuICAgICAgICBmb3JjZSA9IChwYXNzZWRNYXRjaGVzID09PSAzKSA/IE1hdGgubWluKGZvcmNlLCAzMCkgOiBmb3JjZTtcclxuICAgICAgICBmb3JjZSA9IChwYXNzZWRNYXRjaGVzID09PSA0KSA/IE1hdGgubWluKGZvcmNlLCA0MCkgOiBmb3JjZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZvcmNlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==