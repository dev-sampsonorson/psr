import { Component, Inject } from '@angular/core';
import { Validators } from '@angular/forms';
import { APP_CONFIG_TOKEN } from '@corelib';
import { debounceTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services";
import * as i2 from "@angular/forms";
import * as i3 from "@sharedlib";
import * as i4 from "@angular/router";
export class LoginComponent {
    constructor(auth, fb, validators, alert, router, appConfig) {
        this.auth = auth;
        this.fb = fb;
        this.validators = validators;
        this.alert = alert;
        this.router = router;
        this.appConfig = appConfig;
        this.formIsValid = false;
    }
    ngOnInit() {
        this.createForm();
        this.formStatusSub = this.form.statusChanges
            .pipe(
        /**
         * The Debouncetime emits the last received value
         * from the source observable after a specified amount
         * of time has elapsed without any other value appearing
         * on the source Observable
         */
        debounceTime(100)).subscribe(formStatus => {
            if (formStatus === "INVALID" || formStatus === "PENDING")
                this.formIsValid = false;
            else
                this.formIsValid = true;
        });
    }
    loginEmployee() {
        if (this.form.valid) {
            this.loginSub = this.auth.login(this.form.value).subscribe(response => {
                // console.info('login', response);
                this.form.reset();
                this.alert.success("Login successful", "Welcome to the Personal Skill Rating app. Please rate yourself.");
                this.router.navigate([this.appConfig.navigationPaths.Home]);
            });
        }
        else {
            this.form.markAllAsTouched();
        }
    }
    isInvalid(control, validation = undefined) {
        return (!validation && control.touched && control.invalid) ||
            (validation && control.touched && control.hasError(validation));
    }
    get emailControl() { return this.form.get('email'); }
    get passwordControl() { return this.form.get('password'); }
    createForm() {
        this.form = this.fb.group({
            email: ['john@email.com', [Validators.required, Validators.email]],
            password: ['J0h1n.Pass', [Validators.required, this.validators.passwordPatternValidator()]]
        });
    }
    gotoRegister() {
        this.router.navigate([this.appConfig.navigationPaths.Register]);
    }
    ngOnDestroy() {
        this.loginSub.unsubscribe();
        this.formStatusSub.unsubscribe();
    }
}
LoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: LoginComponent, deps: [{ token: i1.AuthService }, { token: i2.FormBuilder }, { token: i1.AuthValidatorsService }, { token: i3.AlertService }, { token: i4.Router }, { token: APP_CONFIG_TOKEN }], target: i0.ɵɵFactoryTarget.Component });
LoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.11", type: LoginComponent, selector: "app-login", ngImport: i0, template: "<!-- <div class=\"login\"> -->\r\n<div class=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n    <h2 class=\"psr-form__header\">Sign In</h2>\r\n</div>\r\n<div class=\"psr-form__container\">\r\n    <div class=\"psr-form__group\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"loginEmployee()\" class=\"psr-form__form\">\r\n            <div>\r\n                <label class=\"psr-form__label\" for=\"email-address\">Email address</label>\r\n                <input formControlName=\"email\" [class.psr-form__field--error]=\"isInvalid(emailControl)\"\r\n                       id=\"email-address\" name=\"email-address\" type=\"email\" class=\"psr-form__field\"\r\n                       placeholder=\"example@email.com\" autocomplete=\"email\" />\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(emailControl, 'required')\">What is your email\r\n                    address?</p>\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(emailControl, 'email')\">Invalid email format</p>\r\n            </div>\r\n            <div>\r\n                <label class=\"psr-form__label\" for=\"password\">Password</label>\r\n                <input formControlName=\"password\" [class.psr-form__field--error]=\"isInvalid(passwordControl)\"\r\n                       id=\"password\" name=\"password\" type=\"password\" class=\"psr-form__field\" placeholder=\"\"\r\n                       autocomplete=\"current-password\">\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(passwordControl, 'required')\">What is your\r\n                    password?</p>\r\n            </div>\r\n            <div>\r\n                <!-- [disabled]=\"!formIsValid\" -->\r\n                <button class=\"psr-form__button\" type=\"submit\">\r\n                    Sign in\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <p class=\"psr-form__footer\">Don't Have an Account? <a class=\"psr-form__alt-action\" (click)=\"gotoRegister()\">Create\r\n            it.</a></p>\r\n</div>\r\n<!-- </div> -->\r\n", styles: [":host{@apply block min-h-full;@apply flex flex-col justify-center items-center;@apply h-screen px-4 py-12 overflow-y-auto;}:host:after{content:\"\";background-image:url(/assets/bg-login.jpg);background-repeat:no-repeat;background-size:cover;opacity:.2;top:0;left:0;bottom:0;right:0;position:absolute;z-index:-1}\n"], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: LoginComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-login',
                    templateUrl: './login.component.html',
                    styleUrls: ['./login.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthService }, { type: i2.FormBuilder }, { type: i1.AuthValidatorsService }, { type: i3.AlertService }, { type: i4.Router }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [APP_CONFIG_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,