import { Component, EventEmitter, Inject, Output } from '@angular/core';
import { Validators } from '@angular/forms';
import { APP_CONFIG_TOKEN } from '@corelib';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/auth.service";
import * as i2 from "@angular/forms";
import * as i3 from "../../services/auth-validators.service";
import * as i4 from "@corelib";
import * as i5 from "@sharedlib";
import * as i6 from "@angular/router";
import * as i7 from "../password-strength/password-strength.component";
export class RegisterComponent {
    constructor(auth, fb, validators, lookupService, alert, router, appConfig) {
        this.auth = auth;
        this.fb = fb;
        this.validators = validators;
        this.lookupService = lookupService;
        this.alert = alert;
        this.router = router;
        this.appConfig = appConfig;
        this.passwordChange = new EventEmitter();
        this.countries = [];
        this.formIsValid = false;
        this.debouncer$ = new Subject();
    }
    ngOnInit() {
        this.createForm();
        this.lookupService.getCountries().subscribe(result => this.countries = result);
        this.debouncer$.pipe(debounceTime(500), distinctUntilChanged()).subscribe((value) => this.passwordChange.emit(value));
        this.formStatusSub = this.form.statusChanges.subscribe(formStatus => {
            if (formStatus === "INVALID" || formStatus === "PENDING")
                this.formIsValid = false;
            else
                this.formIsValid = true;
        });
    }
    registerEmployee() {
        if (this.form.valid) {
            this.registerSub = this.auth.register(this.form.value).subscribe(response => {
                console.info(response);
                this.form.reset();
                this.alert.success("Registration successful", "You have completed registration. Please login.", [
                    { name: 'Login', route: [this.appConfig.navigationPaths.Login] }
                ]);
            });
        }
        else {
            this.form.markAllAsTouched();
        }
    }
    onPasswordChange(e) {
        const { target } = e;
        this.debouncer$.next(target.value);
    }
    isInvalid(control, validation = undefined) {
        return (!validation && control.touched && control.invalid) ||
            (validation && control.touched && control.hasError(validation));
    }
    get emailControl() { return this.form.get('email'); }
    get passwordControl() { return this.form.get('password'); }
    get confirmPasswordControl() { return this.form.get('confirmPassword'); }
    get firstNameControl() { return this.form.get('firstName'); }
    get lastNameControl() { return this.form.get('lastName'); }
    get countryControl() { return this.form.get('country'); }
    get timezoneControl() { return this.form.get('timezone'); }
    get workHoursControl() { return this.form.get('workHours'); }
    get coreHoursControl() { return this.form.get('coreHours'); }
    createForm() {
        this.form = this.fb.group({
            email: ['', [Validators.required, Validators.email], [this.validators.emailAvailableValidator()]],
            password: ['', [Validators.required, this.validators.passwordPatternValidator()]],
            confirmPassword: ['', Validators.required],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            country: ['', Validators.required],
            timezone: ['', Validators.required],
            workHours: ['', Validators.required],
            coreHours: ['', Validators.required]
        }, {
            validator: this.validators.passwordMatchValidator('password', 'confirmPassword')
        });
    }
    gotoLogin() {
        this.router.navigate([this.appConfig.navigationPaths.Login]);
    }
    ngOnDestroy() {
        this.registerSub.unsubscribe();
        this.formStatusSub.unsubscribe();
    }
}
RegisterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: RegisterComponent, deps: [{ token: i1.AuthService }, { token: i2.FormBuilder }, { token: i3.AuthValidatorsService }, { token: i4.LookupService }, { token: i5.AlertService }, { token: i6.Router }, { token: APP_CONFIG_TOKEN }], target: i0.ɵɵFactoryTarget.Component });
RegisterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.11", type: RegisterComponent, selector: "app-register", outputs: { passwordChange: "passwordChange" }, ngImport: i0, template: "<div class=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n    <h2 class=\"psr-form__header\">Register\r\n    </h2>\r\n</div>\r\n<div class=\"psr-form__container\">\r\n    <div class=\"psr-form__group\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"registerEmployee()\" class=\"psr-form__form\">\r\n            <div>\r\n                <label class=\"psr-form__label\" for=\"email-address\">Email address</label>\r\n                <input formControlName=\"email\" [class.psr-form__field--error]=\"isInvalid(emailControl)\"\r\n                       id=\"email-address\" name=\"email-address\" type=\"email\" class=\"psr-form__field\"\r\n                       placeholder=\"example@email.com\" autocomplete=\"email\" />\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(emailControl, 'required')\">What is your email\r\n                    address?</p>\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(emailControl, 'emailNotAvailable')\">\r\n                    Email not available\r\n                </p>\r\n            </div>\r\n            <div class=\"flex flex-wrap -mx-3\">\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"password\">Password</label>\r\n                    <input formControlName=\"password\" [class.psr-form__field--error]=\"isInvalid(passwordControl)\"\r\n                           (input)=\"onPasswordChange($event)\" id=\"password\" name=\"password\" type=\"password\"\r\n                           class=\"psr-form__field\" placeholder=\"\" autocomplete=\"current-password\">\r\n                    <app-password-strength [password-control]=\"passwordControl\"></app-password-strength>\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(passwordControl)\">\r\n                        Enter a combination of at least eight characters; numbers, uppercase, lowercase, and\r\n                        punctuation.\r\n                    </p>\r\n                </div>\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"confirm-password\">Confirm password</label>\r\n                    <input formControlName=\"confirmPassword\"\r\n                           [class.psr-form__field--error]=\"isInvalid(confirmPasswordControl)\" id=\"confirm-password\"\r\n                           name=\"confirm-password\" type=\"password\" class=\"psr-form__field\" placeholder=\"\"\r\n                           autocomplete=\"new-password\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"confirmPasswordControl.hasError('passwordMismatch')\">\r\n                        Passwords do not match\r\n                    </p>\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(confirmPasswordControl, 'required')\">\r\n                        Confirm your password\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex flex-wrap -mx-3\">\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"first-name\">First name</label>\r\n                    <input formControlName=\"firstName\" [class.psr-form__field--error]=\"isInvalid(firstNameControl)\"\r\n                           id=\"first-name\" name=\"first-name\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(firstNameControl)\">\r\n                        What is your first name?\r\n                    </p>\r\n                </div>\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"last-name\">Last name</label>\r\n                    <input formControlName=\"lastName\" [class.psr-form__field--error]=\"isInvalid(lastNameControl)\"\r\n                           id=\"last-name\" name=\"last-name\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(lastNameControl)\">\r\n                        What is your last name?\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex flex-wrap -mx-3\">\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label for=\"country\" class=\"psr-form__label\">Country</label>\r\n                    <select formControlName=\"country\" [class.psr-form__field--error]=\"isInvalid(countryControl)\"\r\n                            id=\"country\" name=\"country\" class=\"psr-form__select\">\r\n                        <option value=\"\" selected> -- </option>\r\n                        <option [value]=\"country.id\" *ngFor=\"let country of countries\">{{ country.value }}</option>\r\n                    </select>\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(countryControl)\">\r\n                        What country do you reside in?\r\n                    </p>\r\n                </div>\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"timezone\">Timezone</label>\r\n                    <input formControlName=\"timezone\" [class.psr-form__field--error]=\"isInvalid(timezoneControl)\"\r\n                           id=\"timezone\" name=\"timezone\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(timezoneControl)\">\r\n                        What is your time zone?\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex flex-wrap -mx-3\">\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"core-hours\">Core hours</label>\r\n                    <input formControlName=\"coreHours\" [class.psr-form__field--error]=\"isInvalid(coreHoursControl)\"\r\n                           id=\"core-hours\" name=\"core-hours\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(coreHoursControl)\">\r\n                        What is your core work period? (8am - 4pm)\r\n                    </p>\r\n                </div>\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"work-hours\">Work hours</label>\r\n                    <input formControlName=\"workHours\" [class.psr-form__field--error]=\"isInvalid(workHoursControl)\"\r\n                           id=\"work-hours\" name=\"work-hours\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(workHoursControl)\">\r\n                        What is your probably work period? (6am - 9pm)\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button [disabled]=\"!formIsValid\" class=\"psr-form__button\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <p class=\"psr-form__footer\">Already have an Account? <a class=\"psr-form__alt-action\" (click)=\"gotoLogin()\">Log\r\n            in.</a></p>\r\n</div>\r\n", styles: [":host{@apply block min-h-full;@apply flex flex-col justify-center items-center;@apply h-screen px-4 py-12 overflow-y-auto;}:host:after{content:\"\";background-image:url(/assets/bg-login.jpg);background-repeat:no-repeat;background-size:cover;opacity:.2;top:0;left:0;bottom:0;right:0;position:absolute;z-index:-1}\n"], components: [{ type: i7.PasswordStrengthComponent, selector: "app-password-strength", inputs: ["password-control"] }], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: RegisterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-register',
                    templateUrl: './register.component.html',
                    styleUrls: ['./register.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthService }, { type: i2.FormBuilder }, { type: i3.AuthValidatorsService }, { type: i4.LookupService }, { type: i5.AlertService }, { type: i6.Router }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [APP_CONFIG_TOKEN]
                }] }]; }, propDecorators: { passwordChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,