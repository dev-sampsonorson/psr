{"version":3,"file":"authlib.js","sources":["../../../projects/authlib/src/lib/auth.constants.ts","../../../projects/authlib/src/lib/services/auth.service.ts","../../../projects/authlib/src/lib/services/auth-validators.service.ts","../../../projects/authlib/src/lib/services/password.service.ts","../../../projects/authlib/src/lib/services/auth.initializer.ts","../../../projects/authlib/src/lib/components/login/login.component.ts","../../../projects/authlib/src/lib/components/login/login.component.html","../../../projects/authlib/src/lib/components/login/login.module.ts","../../../projects/authlib/src/lib/components/password-strength/password-strength.component.ts","../../../projects/authlib/src/lib/components/password-strength/password-strength.component.html","../../../projects/authlib/src/lib/components/password-strength/password-strength.module.ts","../../../projects/authlib/src/lib/components/register/register.component.ts","../../../projects/authlib/src/lib/components/register/register.component.html","../../../projects/authlib/src/lib/components/register/register.module.ts","../../../projects/authlib/src/lib/auth-routing.module.ts","../../../projects/authlib/src/lib/auth.guard.ts","../../../projects/authlib/src/lib/auth.interceptor.ts","../../../projects/authlib/src/lib/authlib.module.ts","../../../projects/authlib/src/authlib.ts"],"sourcesContent":["export interface IAuthEndpoints {\r\n    readonly Register: string;\r\n    readonly Login: string;\r\n    readonly RefreshToken: string;\r\n    readonly RevokeToken: string;\r\n    readonly CheckEmailExists: string;\r\n}\r\n\r\nexport interface IAuthRoutePaths {\r\n    readonly Register: string;\r\n    readonly Login: string;\r\n    readonly RevokeToken: string;\r\n}\r\n\r\nexport interface IAuthNavRoutes {\r\n    readonly Register: () => any[] | string;\r\n    readonly Login: () => any[] | string;\r\n    // readonly RefreshToken: () => any[] | string;\r\n    // readonly RevokeToken: () => any[] | string;\r\n}\r\n\r\nexport interface IAuthConstants {\r\n    readonly UserKey: string;\r\n}\r\n\r\nlet authPaths: IAuthEndpoints = {\r\n    Register: `auth/register`,\r\n    Login: `auth/authenticate`,\r\n    RefreshToken: `auth/refresh`,\r\n    RevokeToken: `auth/revoke`,\r\n    CheckEmailExists: `users/exists`,\r\n};\r\n\r\nlet authRoutePaths: IAuthRoutePaths = {\r\n    Register: 'register',\r\n    Login: 'login',\r\n    RevokeToken: 'revoke',\r\n};\r\n\r\nlet authNavRoutes: IAuthNavRoutes = {\r\n    Register: () => [`/auth/${authRoutePaths.Register}`],\r\n    Login: () => [`/auth/${authRoutePaths.Login}`],\r\n    // RefreshToken: () => [`/auth/refresh`],\r\n    // RevokeToken: () => [`/auth/revoke`],\r\n};\r\n\r\nlet authConsts: IAuthConstants = {\r\n    UserKey: \"psr-userkey-tlxstgmzna\"\r\n}\r\n\r\nexport const AuthEndpoints: IAuthEndpoints = authPaths; // contained in authlib\r\nexport const AuthRoutePaths: IAuthRoutePaths = authRoutePaths;\r\n// export const AuthNavRoutes: IAuthNavRoutes = authNavRoutes;\r\nexport const AuthConstants: IAuthConstants = authConsts;","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n    APP_CONFIG_TOKEN,\r\n    IAppConfig,\r\n    IUser,\r\n    IUserRegistrationReq,\r\n    USER_STORAGE_KEY_TOKEN,\r\n    UserStorageService,\r\n} from '@corelib';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, take, tap } from 'rxjs/operators';\r\n\r\nimport { AuthEndpoints } from '../auth.constants';\r\nimport { IUserLoginReq } from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private refreshTokenTimeout: any;\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private userStorage: UserStorageService,\r\n        private router: Router,\r\n        @Inject(APP_CONFIG_TOKEN) private appConfig: IAppConfig,\r\n        @Inject(USER_STORAGE_KEY_TOKEN) private userStorageKey: string\r\n    ) { }\r\n\r\n    public isAuthenticated(): Observable<boolean> {\r\n        return this.userStorage.getUser().pipe(\r\n            take(1),\r\n            map(user => !!user)\r\n        );\r\n    }\r\n\r\n    public getToken(): Observable<string | null> {\r\n        // this.retrieveUser()\r\n        return this.userStorage.getUser().pipe(\r\n            take(1),\r\n            map(user => user && user.token)\r\n        );\r\n    }\r\n\r\n    public login(payload: IUserLoginReq): Observable<IUser> {\r\n        return this.http.post<IUser>(this.appConfig.getUrl(AuthEndpoints.Login), payload, { withCredentials: true }).pipe(\r\n            // shareReplay(),\r\n            tap(user => {\r\n                this.userStorage.setUser(user);\r\n                this.userStorage.storeUser(user);\r\n                // this.userSubject.next(user);\r\n                // this.startRefreshTokenTimer();\r\n                // this.storeUser(user);\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    public redirectToLogin(): void {\r\n        this.router.navigate([this.appConfig.navigationPaths.Login]);\r\n    }\r\n\r\n    public logout() {\r\n        // this.userSubject.next(null);\r\n        // logout from server\r\n        // pass refresh token if you can\r\n        // console.log('logging out...');\r\n        return this.http.post<any>(this.appConfig.getUrl(AuthEndpoints.RevokeToken), {}, { withCredentials: true }).pipe(\r\n            // shareReplay(),\r\n            tap((user) => {\r\n                // emit null as next user\r\n                this.userStorage.setUser(null);\r\n                // this.userSubject.next(null);\r\n\r\n                // stop refresh token timer\r\n                // this.startRefreshTokenTimer();\r\n\r\n                // remove user from localStorage\r\n                this.userStorage.removeUser();\r\n                // this.removeUser();\r\n\r\n                // redirect to login\r\n                this.router.navigate([this.appConfig.navigationPaths.Login]);\r\n            })\r\n        ).subscribe();\r\n    }\r\n\r\n\r\n    public register(payload: IUserRegistrationReq): Observable<IUser> {\r\n        return this.http.post<IUser>(this.appConfig.getUrl(AuthEndpoints.Register), payload, { withCredentials: true }).pipe(\r\n            tap(user => {\r\n                this.userStorage.setUser(user);\r\n                // this.userSubject.next(user);\r\n                // this.startRefreshTokenTimer();\r\n                this.userStorage.storeUser(user);\r\n                // this.storeUser(user);\r\n            })\r\n        );\r\n    }\r\n\r\n    public refreshToken() {\r\n        return this.getToken().pipe(\r\n            switchMap(token => this.http.post<any>(this.appConfig.getUrl(AuthEndpoints.RefreshToken), { token }, { withCredentials: true }).pipe(\r\n                tap((user) => {\r\n                    this.userStorage.setUser(user);\r\n                    // this.userSubject.next(user);\r\n                    // this.startRefreshTokenTimer();\r\n                    this.userStorage.storeUser(user);\r\n                    // this.storeUser(user);\r\n                })\r\n            ))\r\n        )\r\n    }\r\n\r\n    public checkEmailExists(email: string): Observable<any> {\r\n        return this.http.post(this.appConfig.getUrl(AuthEndpoints.CheckEmailExists), {\r\n            email: email\r\n        });\r\n    }\r\n\r\n    private startRefreshTokenTimer() {\r\n\r\n        this.userStorage.getUser()\r\n            .pipe(\r\n                take(1)\r\n            )\r\n            .subscribe(user => {\r\n                // parse json object from base64 encoded jwt token\r\n                const jwtToken = user && JSON.parse(atob(user.token.split('.')[1]));\r\n\r\n                if (!jwtToken) return;\r\n\r\n                // set a timeout to refresh the token a minute before it expires\r\n                const expires = new Date(jwtToken.exp * 1000);\r\n                const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n                this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\r\n            });\r\n\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, AsyncValidatorFn, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, first, map, switchMap } from 'rxjs/operators';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthValidatorsService {\r\n\r\n    constructor(private auth: AuthService) { }\r\n\r\n    passwordMatchValidator(password: string, confirmPassword: string) {\r\n        return (formGroup: FormGroup) => {\r\n            const passwordControl = formGroup.controls[password];\r\n            const confirmPasswordControl = formGroup.controls[confirmPassword];\r\n\r\n            if (!passwordControl || !confirmPasswordControl) {\r\n                return null;\r\n            }\r\n\r\n            if (\r\n                confirmPasswordControl.errors &&\r\n                !confirmPasswordControl.errors.passwordMismatch\r\n            ) {\r\n                return null;\r\n            }\r\n\r\n            if (passwordControl.value !== confirmPasswordControl.value) {\r\n                confirmPasswordControl.setErrors({ passwordMismatch: true });\r\n                return true;\r\n            } else {\r\n                confirmPasswordControl.setErrors(null);\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    /*\r\n        RegEx\tDescription\r\n        ^\tThe password string will start this way\r\n        (?=.*[a-z])\tThe string must contain at least 1 lowercase alphabetical character\r\n        (?=.*[A-Z])\tThe string must contain at least 1 uppercase alphabetical character\r\n        (?=.*[0-9])\tThe string must contain at least 1 numeric character\r\n        (?=.*[!@#$%^&*])\tThe string must contain at least one special character, but we are escaping reserved RegEx characters to avoid conflict\r\n        (?=.{8,})\tThe string must be eight characters or longer\r\n\r\n        by- Nic Raboy\r\n    */\r\n    passwordPatternValidator(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            if (!control.value)\r\n                return null;\r\n\r\n            const regex = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*\\.])(?=.{8,})');\r\n            const valid = regex.test(control.value);\r\n            return valid ? null : { passwordInvalid: true };\r\n        };\r\n    }\r\n\r\n    emailAvailableValidator(): AsyncValidatorFn {\r\n        const subject = new BehaviorSubject<string>('');\r\n        const debouncedInput$ = subject.asObservable().pipe(\r\n            distinctUntilChanged(),\r\n            debounceTime(1000),\r\n            switchMap(value => this.auth.checkEmailExists(value)),\r\n            map((result: any, index: number) => {\r\n                return result.value === 'invalid' ? { emailNotAvailable: true } : null;\r\n            })\r\n        ).pipe(first());\r\n\r\n        return (control: AbstractControl): Observable<ValidationErrors | null> => {\r\n            if (!control.value)\r\n                return of(null);\r\n\r\n            subject.next(control.value);\r\n            return debouncedInput$;\r\n        };\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PasswordService {\r\n\r\n    constructor() { }\r\n\r\n    checkStrength(password: string): number {\r\n        /* if (!password)\r\n            return 0; */\r\n\r\n        // 1\r\n        let force: number = 0;\r\n\r\n        // 2\r\n        const regex: RegExp = /[$-/:-?{-~!\"^_@`\\[\\]]/g;\r\n        const lowerLetters: boolean = /[a-z]+/.test(password);\r\n        const upperLetters: boolean = /[A-Z]+/.test(password);\r\n        const numbers: boolean = /[0-9]+/.test(password);\r\n        const symbols: boolean = regex.test(password);\r\n\r\n        // 3\r\n        const flags: boolean[] = [lowerLetters, upperLetters, numbers, symbols];\r\n\r\n        // 4\r\n        let passedMatches = 0;\r\n        for (const flag of flags) {\r\n            passedMatches += flag === true ? 1 : 0;\r\n        }\r\n\r\n        // 5\r\n        force += 2 * password.length + ((password.length >= 10) ? 1 : 0);\r\n        force += passedMatches * 10;\r\n\r\n        // 6\r\n        force = (password.length <= 8) ? Math.min(force, 10) : force;\r\n\r\n        // 7\r\n        force = (passedMatches === 1) ? Math.min(force, 10) : force;\r\n        force = (passedMatches === 2) ? Math.min(force, 20) : force;\r\n        force = (passedMatches === 3) ? Math.min(force, 30) : force;\r\n        force = (passedMatches === 4) ? Math.min(force, 40) : force;\r\n\r\n        return force;\r\n    }\r\n}\r\n","import { AuthService } from './auth.service';\r\n\r\nexport function authInitializer(auth: AuthService) {\r\n    return () => new Promise(resolve => {\r\n        // attempt to refresh token on app start up to auto authenticate\r\n        auth.refreshToken()\r\n            .subscribe()\r\n            .add(resolve);\r\n    });\r\n}","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { APP_CONFIG_TOKEN, IAppConfig } from '@corelib';\r\nimport { AlertService } from '@sharedlib';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { AuthService, AuthValidatorsService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\r\n    public form!: FormGroup;\r\n    public formIsValid: boolean = false;\r\n\r\n    private loginSub!: Subscription;\r\n    private formStatusSub!: Subscription;\r\n\r\n    constructor(\r\n        private auth: AuthService,\r\n        private fb: FormBuilder,\r\n        private validators: AuthValidatorsService,\r\n        private alert: AlertService,\r\n        private router: Router,\r\n        @Inject(APP_CONFIG_TOKEN) private appConfig: IAppConfig\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.createForm();\r\n\r\n        this.formStatusSub = this.form.statusChanges\r\n            .pipe(\r\n                /**\r\n                 * The Debouncetime emits the last received value\r\n                 * from the source observable after a specified amount\r\n                 * of time has elapsed without any other value appearing\r\n                 * on the source Observable\r\n                 */\r\n                debounceTime(100)\r\n            ).subscribe(formStatus => {\r\n                if (formStatus === \"INVALID\" || formStatus === \"PENDING\")\r\n                    this.formIsValid = false;\r\n                else\r\n                    this.formIsValid = true;\r\n            });\r\n    }\r\n\r\n    loginEmployee() {\r\n        if (this.form.valid) {\r\n            this.loginSub = this.auth.login(this.form.value).subscribe(response => {\r\n                // console.info('login', response);\r\n                this.form.reset();\r\n                this.alert.success(\r\n                    \"Login successful\",\r\n                    \"Welcome to the Personal Skill Rating app. Please rate yourself.\"\r\n                );\r\n                this.router.navigate([this.appConfig.navigationPaths.Home]);\r\n            });\r\n        } else {\r\n            this.form.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    isInvalid(control: FormControl, validation: string | undefined = undefined) {\r\n        return (!validation && control.touched && control.invalid) ||\r\n            (validation && control.touched && control.hasError(validation));\r\n    }\r\n\r\n    get emailControl() { return this.form.get('email') as FormControl; }\r\n    get passwordControl() { return this.form.get('password') as FormControl; }\r\n\r\n    createForm() {\r\n        this.form = this.fb.group({\r\n            email: ['john@email.com', [Validators.required, Validators.email]],\r\n            password: ['J0h1n.Pass', [Validators.required, this.validators.passwordPatternValidator()]]\r\n        });\r\n    }\r\n\r\n    gotoRegister(): void {\r\n        this.router.navigate([this.appConfig.navigationPaths.Register]);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.loginSub.unsubscribe();\r\n        this.formStatusSub.unsubscribe();\r\n    }\r\n}\r\n","<!-- <div class=\"login\"> -->\r\n<div class=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n    <h2 class=\"psr-form__header\">Sign In</h2>\r\n</div>\r\n<div class=\"psr-form__container\">\r\n    <div class=\"psr-form__group\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"loginEmployee()\" class=\"psr-form__form\">\r\n            <div>\r\n                <label class=\"psr-form__label\" for=\"email-address\">Email address</label>\r\n                <input formControlName=\"email\" [class.psr-form__field--error]=\"isInvalid(emailControl)\"\r\n                       id=\"email-address\" name=\"email-address\" type=\"email\" class=\"psr-form__field\"\r\n                       placeholder=\"example@email.com\" autocomplete=\"email\" />\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(emailControl, 'required')\">What is your email\r\n                    address?</p>\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(emailControl, 'email')\">Invalid email format</p>\r\n            </div>\r\n            <div>\r\n                <label class=\"psr-form__label\" for=\"password\">Password</label>\r\n                <input formControlName=\"password\" [class.psr-form__field--error]=\"isInvalid(passwordControl)\"\r\n                       id=\"password\" name=\"password\" type=\"password\" class=\"psr-form__field\" placeholder=\"\"\r\n                       autocomplete=\"current-password\">\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(passwordControl, 'required')\">What is your\r\n                    password?</p>\r\n            </div>\r\n            <div>\r\n                <!-- [disabled]=\"!formIsValid\" -->\r\n                <button class=\"psr-form__button\" type=\"submit\">\r\n                    Sign in\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <p class=\"psr-form__footer\">Don't Have an Account? <a class=\"psr-form__alt-action\" (click)=\"gotoRegister()\">Create\r\n            it.</a></p>\r\n</div>\r\n<!-- </div> -->\r\n","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { LoginComponent } from './login.component';\r\n\r\n@NgModule({\r\n    imports: [ReactiveFormsModule],\r\n    declarations: [LoginComponent],\r\n    exports: [LoginComponent]\r\n})\r\nexport class LoginModule { }","import { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, QueryList, Renderer2, SimpleChange, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\nimport { PasswordService } from '../../services/password.service';\r\n\r\n@Component({\r\n    selector: 'app-password-strength',\r\n    templateUrl: './password-strength.component.html',\r\n    styleUrls: ['./password-strength.component.scss']\r\n})\r\nexport class PasswordStrengthComponent implements OnInit, AfterViewInit {\r\n    @ViewChildren('chunk') chunkEls!: QueryList<ElementRef>;\r\n    @Input('password-control') passwordControl!: FormControl;\r\n    private defaultColor: string = '#ddd';\r\n    private colors: string[] = ['darkred', 'orangered', 'orange', 'yellowgreen', '#ddd'];\r\n\r\n    constructor(private pwdService: PasswordService, private renderer: Renderer2) { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.passwordControl.valueChanges.pipe(\r\n            debounceTime(200),\r\n            distinctUntilChanged()\r\n        ).subscribe((value: string) => {\r\n            const colorIndex = this.getColorIndex(this.pwdService.checkStrength(value));\r\n\r\n            // reset bg color            \r\n\r\n            this.chunkEls.forEach((item, index) => {\r\n                this.renderer.setStyle(item.nativeElement, 'background-color', this.defaultColor);\r\n\r\n                if (colorIndex === -1 || index <= colorIndex) {\r\n                    this.renderer.setStyle(item.nativeElement, 'background-color', this.colors[colorIndex]);\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    private getColorIndex(score: number) {\r\n        const index = [10, 20, 30, 40].indexOf(score);\r\n        return index === -1 ? (this.colors.length - 1) : index;\r\n    }\r\n\r\n}\r\n","<div class=\"strength\">\r\n    <ul class=\"strength__bar\">\r\n        <li class=\"strength__chunk\" #chunk></li>\r\n        <li class=\"strength__chunk\" #chunk></li>\r\n        <li class=\"strength__chunk\" #chunk></li>\r\n        <li class=\"strength__chunk\" #chunk></li>\r\n    </ul>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { PasswordStrengthComponent } from './password-strength.component';\r\n\r\n@NgModule({\r\n    declarations: [PasswordStrengthComponent],\r\n    exports: [PasswordStrengthComponent]\r\n})\r\nexport class PasswordStrengthModule { }","import { Component, EventEmitter, Inject, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { APP_CONFIG_TOKEN, IAppConfig, ILookupItem, LookupService } from '@corelib';\r\nimport { AlertService } from '@sharedlib';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { AuthValidatorsService } from '../../services/auth-validators.service';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit, OnDestroy {\r\n\r\n    @Output() passwordChange: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    public form!: FormGroup;\r\n    public countries: ILookupItem[] = [];\r\n    public formIsValid: boolean = false;\r\n\r\n    private debouncer$: Subject<string> = new Subject();\r\n    private registerSub!: Subscription;\r\n    private formStatusSub!: Subscription;\r\n\r\n    constructor(\r\n        private auth: AuthService,\r\n        private fb: FormBuilder,\r\n        private validators: AuthValidatorsService,\r\n        private lookupService: LookupService,\r\n        private alert: AlertService,\r\n        private router: Router,\r\n        @Inject(APP_CONFIG_TOKEN) private appConfig: IAppConfig\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.createForm();\r\n\r\n        this.lookupService.getCountries().subscribe(result => this.countries = result);\r\n\r\n        this.debouncer$.pipe(\r\n            debounceTime(500),\r\n            distinctUntilChanged()\r\n        ).subscribe((value: string) => this.passwordChange.emit(value));\r\n\r\n        this.formStatusSub = this.form.statusChanges.subscribe(formStatus => {\r\n            if (formStatus === \"INVALID\" || formStatus === \"PENDING\")\r\n                this.formIsValid = false;\r\n            else\r\n                this.formIsValid = true;\r\n        });\r\n    }\r\n\r\n    registerEmployee() {\r\n        if (this.form.valid) {\r\n            this.registerSub = this.auth.register(this.form.value).subscribe(response => {\r\n                console.info(response);\r\n                this.form.reset();\r\n                this.alert.success(\r\n                    \"Registration successful\",\r\n                    \"You have completed registration. Please login.\",\r\n                    [\r\n                        { name: 'Login', route: [this.appConfig.navigationPaths.Login] }\r\n                    ]\r\n                )\r\n            });\r\n        } else {\r\n            this.form.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    onPasswordChange(e: Event) {\r\n        const { target } = e;\r\n        this.debouncer$.next((target as HTMLInputElement).value);\r\n    }\r\n\r\n    isInvalid(control: FormControl, validation: string | undefined = undefined) {\r\n        return (!validation && control.touched && control.invalid) ||\r\n            (validation && control.touched && control.hasError(validation));\r\n    }\r\n\r\n    get emailControl() { return this.form.get('email') as FormControl; }\r\n    get passwordControl() { return this.form.get('password') as FormControl; }\r\n    get confirmPasswordControl() { return this.form.get('confirmPassword') as FormControl; }\r\n    get firstNameControl() { return this.form.get('firstName') as FormControl; }\r\n    get lastNameControl() { return this.form.get('lastName') as FormControl; }\r\n    get countryControl() { return this.form.get('country') as FormControl; }\r\n    get timezoneControl() { return this.form.get('timezone') as FormControl; }\r\n    get workHoursControl() { return this.form.get('workHours') as FormControl; }\r\n    get coreHoursControl() { return this.form.get('coreHours') as FormControl; }\r\n\r\n    createForm() {\r\n        this.form = this.fb.group({\r\n            email: ['', [Validators.required, Validators.email], [this.validators.emailAvailableValidator()]],\r\n            password: ['', [Validators.required, this.validators.passwordPatternValidator()]],\r\n            confirmPassword: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            country: ['', Validators.required],\r\n            timezone: ['', Validators.required],\r\n            workHours: ['', Validators.required],\r\n            coreHours: ['', Validators.required]\r\n        }, {\r\n            validator: this.validators.passwordMatchValidator('password', 'confirmPassword')\r\n        });\r\n    }\r\n\r\n    gotoLogin() {\r\n        this.router.navigate([this.appConfig.navigationPaths.Login]);\r\n    }\r\n    ngOnDestroy(): void {\r\n        this.registerSub.unsubscribe();\r\n        this.formStatusSub.unsubscribe();\r\n    }\r\n\r\n}\r\n","<div class=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n    <h2 class=\"psr-form__header\">Register\r\n    </h2>\r\n</div>\r\n<div class=\"psr-form__container\">\r\n    <div class=\"psr-form__group\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"registerEmployee()\" class=\"psr-form__form\">\r\n            <div>\r\n                <label class=\"psr-form__label\" for=\"email-address\">Email address</label>\r\n                <input formControlName=\"email\" [class.psr-form__field--error]=\"isInvalid(emailControl)\"\r\n                       id=\"email-address\" name=\"email-address\" type=\"email\" class=\"psr-form__field\"\r\n                       placeholder=\"example@email.com\" autocomplete=\"email\" />\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(emailControl, 'required')\">What is your email\r\n                    address?</p>\r\n                <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(emailControl, 'emailNotAvailable')\">\r\n                    Email not available\r\n                </p>\r\n            </div>\r\n            <div class=\"flex flex-wrap -mx-3\">\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"password\">Password</label>\r\n                    <input formControlName=\"password\" [class.psr-form__field--error]=\"isInvalid(passwordControl)\"\r\n                           (input)=\"onPasswordChange($event)\" id=\"password\" name=\"password\" type=\"password\"\r\n                           class=\"psr-form__field\" placeholder=\"\" autocomplete=\"current-password\">\r\n                    <app-password-strength [password-control]=\"passwordControl\"></app-password-strength>\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(passwordControl)\">\r\n                        Enter a combination of at least eight characters; numbers, uppercase, lowercase, and\r\n                        punctuation.\r\n                    </p>\r\n                </div>\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"confirm-password\">Confirm password</label>\r\n                    <input formControlName=\"confirmPassword\"\r\n                           [class.psr-form__field--error]=\"isInvalid(confirmPasswordControl)\" id=\"confirm-password\"\r\n                           name=\"confirm-password\" type=\"password\" class=\"psr-form__field\" placeholder=\"\"\r\n                           autocomplete=\"new-password\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"confirmPasswordControl.hasError('passwordMismatch')\">\r\n                        Passwords do not match\r\n                    </p>\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(confirmPasswordControl, 'required')\">\r\n                        Confirm your password\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex flex-wrap -mx-3\">\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"first-name\">First name</label>\r\n                    <input formControlName=\"firstName\" [class.psr-form__field--error]=\"isInvalid(firstNameControl)\"\r\n                           id=\"first-name\" name=\"first-name\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(firstNameControl)\">\r\n                        What is your first name?\r\n                    </p>\r\n                </div>\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"last-name\">Last name</label>\r\n                    <input formControlName=\"lastName\" [class.psr-form__field--error]=\"isInvalid(lastNameControl)\"\r\n                           id=\"last-name\" name=\"last-name\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(lastNameControl)\">\r\n                        What is your last name?\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex flex-wrap -mx-3\">\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label for=\"country\" class=\"psr-form__label\">Country</label>\r\n                    <select formControlName=\"country\" [class.psr-form__field--error]=\"isInvalid(countryControl)\"\r\n                            id=\"country\" name=\"country\" class=\"psr-form__select\">\r\n                        <option value=\"\" selected> -- </option>\r\n                        <option [value]=\"country.id\" *ngFor=\"let country of countries\">{{ country.value }}</option>\r\n                    </select>\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(countryControl)\">\r\n                        What country do you reside in?\r\n                    </p>\r\n                </div>\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"timezone\">Timezone</label>\r\n                    <input formControlName=\"timezone\" [class.psr-form__field--error]=\"isInvalid(timezoneControl)\"\r\n                           id=\"timezone\" name=\"timezone\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(timezoneControl)\">\r\n                        What is your time zone?\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex flex-wrap -mx-3\">\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"core-hours\">Core hours</label>\r\n                    <input formControlName=\"coreHours\" [class.psr-form__field--error]=\"isInvalid(coreHoursControl)\"\r\n                           id=\"core-hours\" name=\"core-hours\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(coreHoursControl)\">\r\n                        What is your core work period? (8am - 4pm)\r\n                    </p>\r\n                </div>\r\n                <div class=\"w-1/2 px-3\">\r\n                    <label class=\"psr-form__label\" for=\"work-hours\">Work hours</label>\r\n                    <input formControlName=\"workHours\" [class.psr-form__field--error]=\"isInvalid(workHoursControl)\"\r\n                           id=\"work-hours\" name=\"work-hours\" type=\"text\" class=\"psr-form__field\" placeholder=\"\">\r\n                    <p class=\"psr-form__field-error-msg\" *ngIf=\"isInvalid(workHoursControl)\">\r\n                        What is your probably work period? (6am - 9pm)\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button [disabled]=\"!formIsValid\" class=\"psr-form__button\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <p class=\"psr-form__footer\">Already have an Account? <a class=\"psr-form__alt-action\" (click)=\"gotoLogin()\">Log\r\n            in.</a></p>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { PasswordStrengthModule } from '../password-strength';\r\nimport { RegisterComponent } from './register.component';\r\n\r\n\r\n\r\n@NgModule({\r\n    imports: [ReactiveFormsModule, PasswordStrengthModule],\r\n    declarations: [RegisterComponent],\r\n    exports: [RegisterComponent]\r\n})\r\nexport class RegisterModule { }","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AuthRoutePaths } from './auth.constants';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\n\r\nconst authRoutes: Routes = [\r\n    { path: AuthRoutePaths.Register, component: RegisterComponent }, // register\r\n    { path: AuthRoutePaths.Login, component: LoginComponent }, // login\r\n    { path: '**', redirectTo: AuthRoutePaths.Login, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(authRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { APP_CONFIG_TOKEN, IAppConfig, QueryParameterNames } from '@corelib';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { AuthService } from './services/auth.service';\r\n\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n    constructor(\r\n        private auth: AuthService,\r\n        private router: Router,\r\n        @Inject(APP_CONFIG_TOKEN) private appConfig: IAppConfig\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n        return this.auth.isAuthenticated().pipe(\r\n            tap(isAuthenticated => this.handleAuthorization(isAuthenticated, state))\r\n        )\r\n    }\r\n\r\n    private handleAuthorization(isAuthenticated: boolean, state: RouterStateSnapshot) {\r\n        if (!isAuthenticated) {\r\n            this.router.navigate([this.appConfig.navigationPaths.Login], {\r\n                queryParams: {\r\n                    [QueryParameterNames.ReturnUrl]: state.url\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { APP_CONFIG_TOKEN, IAppConfig } from '@corelib';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\nimport { AuthService } from './services/auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthorizeInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        private auth: AuthService,\r\n        @Inject(APP_CONFIG_TOKEN) private appConfig: IAppConfig\r\n    ) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return this.auth.getToken()\r\n            .pipe(\r\n                mergeMap(token => this.processRequestWithToken(token, req, next))\r\n            );\r\n    }\r\n    private processRequestWithToken(token: string | null, req: HttpRequest<any>, next: HttpHandler) {\r\n        // const isApiUrl = req.url.startsWith(this.env.apiUrl);\r\n        const isApiUrl = req.url.startsWith(this.appConfig.baseUrl);\r\n        if (!!token && isApiUrl) { //this.isSameOriginUrl(req)\r\n            req = req.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(req);\r\n    }\r\n\r\n    private isSameOriginUrl(req: any) {\r\n        // It's an absolute url with the same origin.\r\n        if (req.url.startsWith(`${window.location.origin}/`)) {\r\n            return true;\r\n        }\r\n\r\n        // It's a protocol relative url with the same origin.\r\n        // For example: //www.example.com/api/Products\r\n        if (req.url.startsWith(`//${window.location.host}/`)) {\r\n            return true;\r\n        }\r\n\r\n        // It's a relative url like /api/Products\r\n        if (/^\\/[^\\/].*/.test(req.url)) {\r\n            return true;\r\n        }\r\n\r\n        // It's an absolute or protocol relative url that\r\n        // doesn't have the same origin.\r\n        return false;\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AuthorizeInterceptor } from './auth.interceptor';\nimport { LoginModule } from './components/login';\nimport { PasswordStrengthModule } from './components/password-strength';\nimport { RegisterModule } from './components/register';\n\n\n\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n\n        AuthRoutingModule,\n        RegisterModule,\n        PasswordStrengthModule,\n        LoginModule\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthorizeInterceptor, multi: true }\n    ],\n    exports: []\n})\nexport class AuthlibModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}