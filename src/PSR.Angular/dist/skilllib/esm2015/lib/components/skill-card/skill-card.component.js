import { Component, HostBinding, HostListener, Input } from '@angular/core';
import { BlockUiDirective } from '@sharedlib';
import { SKILL_CARD_TOKEN } from '../skill-list-display/skill-card.token';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../services/skill-card-context-menuitem.service";
import * as i3 from "@sharedlib";
import * as i4 from "@angular/common";
export class SkillCardComponent {
    constructor(el, router, renderer, ctxMenuItem) {
        this.el = el;
        this.router = router;
        this.renderer = renderer;
        this.ctxMenuItem = ctxMenuItem;
        this.blockUiDirective = new BlockUiDirective(this.el, this.renderer);
        this.menuItems = [];
        this._blockCard = false;
        // @Output() skillCardClick = new EventEmitter<ISkill>();
        this.isContextMenuVisible = false;
        this.contextMenuHandle = Symbol('contextMenuHandle');
        this.type = 'overview';
        this._eventComplete$ = this.ctxMenuItem.onEventComplete$;
    }
    set blockCard(value) {
        this._blockCard = value;
        // this.cdr.markForCheck();
        this.blockUiDirective.toggleBlockUi(value);
    }
    get blockCard() {
        return this._blockCard;
    }
    ngOnInit() { }
    getCategoryInfo(skill) {
        return `${skill.categoryName} / ${skill.subcategoryName}`;
    }
    onHandleEscape(e) {
        if (e.key === 'Esc' || e.key === 'Escape') {
            if (this.isContextMenuVisible)
                this.isContextMenuVisible = false;
        }
    }
    onToggleContextMenu() {
        this.isContextMenuVisible = !this.isContextMenuVisible;
    }
    onMenuItemClick({ menuItem, handle }) {
        var _a;
        const routerLink = menuItem.routerLink((_a = this.skill) === null || _a === void 0 ? void 0 : _a.id);
        if (menuItem.navigatable) {
            Array.isArray(routerLink)
                ? this.router.navigate(routerLink)
                : this.router.navigateByUrl(routerLink);
        }
        else {
            this.blockCard = true;
            this.skill && this.ctxMenuItem.start(this.skill.id, menuItem.name);
        }
        this._eventComplete$.subscribe(({ skillId, menuName }) => {
            if (this.skill && this.skill.id === skillId) {
                this.blockCard = false;
            }
        });
        this.isContextMenuVisible = false;
    }
    ngOnDestroy() {
        var _a;
        this.blockUiDirective.ngOnDestroy();
        (_a = this._eventCompleteSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
SkillCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: SkillCardComponent, deps: [{ token: i0.ElementRef }, { token: i1.Router }, { token: i0.Renderer2 }, { token: i2.SkillCardContextMenuitemService }], target: i0.ɵɵFactoryTarget.Component });
SkillCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.11", type: SkillCardComponent, selector: "skl-card", inputs: { skill: "skill", menuItems: "menuItems" }, host: { listeners: { "document:keydown": "onHandleEscape($event)" }, properties: { "attr.xBlockui": "this.blockUiDirective" } }, providers: [{ provide: SKILL_CARD_TOKEN, useExisting: SkillCardComponent }], ngImport: i0, template: "<ng-container *ngIf=\"skill\">\n    <!-- (click)=\"skillCardClickHandler(skill)\" -->\n    <div tabindex=\"0\"\n         class=\"relative flex flex-col justify-between h-full p-4 space-y-4 text-left border border-gray-200 rounded-lg hover:border-gray-300 focus-within:ring-1 focus-within:ring-inset focus-within:ring-indigo-500\">\n        <h3 class=\"text-lg font-medium text-gray-700\">{{ skill.name}}</h3>\n        <div class=\"skill-stats\">\n            <div class=\"skill-stats__info\">\n                <span\n                      class=\"mr-4 text-xs font-thin text-gray-500 transition-colors duration-200 hover:text-gray-900\">Employees</span>\n                <span class=\"text-xl font-normal text-gray-700\">{{ skill.employees }}</span>\n            </div>\n            <div class=\"skill-stats__info\">\n                <span\n                      class=\"mr-4 text-xs font-thin text-gray-500 transition-colors duration-200 hover:text-gray-900\">Team\n                    Competency</span>\n                <span class=\"text-xl font-normal text-gray-700\">{{ skill.teamCompetency }}</span>\n            </div>\n        </div>\n        <div class=\"flex items-center h-5\">\n            <span title=\"{{getCategoryInfo(skill)}}\"\n                  class=\"flex-1 pr-2 text-sm font-thin text-gray-500 truncate\">{{getCategoryInfo(skill)}}</span>\n            <div class=\"relative\">\n                <app-button-icon (buttonClick)=\"onToggleContextMenu()\">\n                    <app-icon-dot-vertical></app-icon-dot-vertical>\n                </app-button-icon>\n                <button *ngIf=\"isContextMenuVisible\" (click)=\"onToggleContextMenu()\" class=\"close-overlay\"\n                        tabindex=\"-1\"></button>\n                <app-context-menu [handle]=\"contextMenuHandle\" *ngIf=\"isContextMenuVisible\"\n                                  (menuItemClick)=\"onMenuItemClick($event)\" [menuItems]=\"menuItems\"\n                                  class=\"absolute right-0 w-40\"></app-context-menu>\n            </div>\n        </div>\n    </div>\n    <!-- <ng-container #blockUiOverlay></ng-container> -->\n</ng-container>\n", styles: [":host{display:block;position:relative;width:100%;min-height:190px;cursor:pointer;--eui-blockui-overlay-border-radius: .5rem;--eui-blockui-cursor: wait;--eui-blockui-background-color: rgba(255, 255, 255, .7)}.skill-stats{display:flex;flex-wrap:wrap}.skill-stats__info{display:flex;flex-direction:column;flex:none}\n"], components: [{ type: i3.ButtonIconComponent, selector: "app-button-icon", inputs: ["ariaLabel"], outputs: ["buttonClick"] }, { type: i3.IconDotVerticalComponent, selector: "app-icon-dot-vertical" }, { type: i3.ContextMenuComponent, selector: "app-context-menu", inputs: ["handle", "menuItems"], outputs: ["menuItemClick"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: SkillCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'skl-card',
                    templateUrl: './skill-card.component.html',
                    styleUrls: ['./skill-card.component.scss'],
                    providers: [{ provide: SKILL_CARD_TOKEN, useExisting: SkillCardComponent }],
                    // changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Router }, { type: i0.Renderer2 }, { type: i2.SkillCardContextMenuitemService }]; }, propDecorators: { blockUiDirective: [{
                type: HostBinding,
                args: ['attr.xBlockui']
            }], skill: [{
                type: Input
            }], menuItems: [{
                type: Input
            }], onHandleEscape: [{
                type: HostListener,
                args: ['document:keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,