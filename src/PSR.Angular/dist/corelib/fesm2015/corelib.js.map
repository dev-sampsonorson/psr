{"version":3,"file":"corelib.js","sources":["../../../projects/corelib/src/lib/services/custom-url.serializer.ts","../../../projects/corelib/src/lib/services/form.service.ts","../../../projects/corelib/src/lib/app.constants.ts","../../../projects/corelib/src/lib/tokens/app-config.token.ts","../../../projects/corelib/src/lib/tokens/user-storage-key.token.ts","../../../projects/corelib/src/lib/services/lookup.service.ts","../../../projects/corelib/src/lib/services/storage.service.ts","../../../projects/corelib/src/lib/services/test.service.ts","../../../projects/corelib/src/lib/models/user.model.ts","../../../projects/corelib/src/lib/services/user-storage.service.ts","../../../projects/corelib/src/lib/error/error-dispatcher.service.ts","../../../projects/corelib/src/lib/error/error-handler.service.ts","../../../projects/corelib/src/lib/error/error.interceptor.ts","../../../projects/corelib/src/lib/error/error.model.ts","../../../projects/corelib/src/lib/error/global-error-handler.service.ts","../../../projects/corelib/src/lib/error/error.module.ts","../../../projects/corelib/src/lib/http-loading.interceptor.ts","../../../projects/corelib/src/lib/corelib.module.ts","../../../projects/corelib/src/corelib.ts"],"sourcesContent":["import { DefaultUrlSerializer, UrlSerializer, UrlTree } from '@angular/router';\n\nexport class CustomUrlSerializer implements UrlSerializer {\n\n    private _doubleSlashPattern: RegExp = /\\/\\//;\n\n    parse(url: any): UrlTree {\n        let dus = new DefaultUrlSerializer();\n        // url = this.replaceDoubleSlash(url);\n        return dus.parse(url);\n    }\n    serialize(tree: UrlTree): any {\n        let dus = new DefaultUrlSerializer(),\n            path = dus.serialize(tree);\n        path = this.replaceDoubleSlash(path);\n        // console.log('path', path);\n        return path;\n    }\n\n    private replaceDoubleSlash(input: string): string {\n        let inputString = input;\n        if (this._doubleSlashPattern.test(inputString)) {\n            inputString = inputString.replace(this._doubleSlashPattern, '/');\n        }\n\n        return inputString;\n    }\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FormService {\n    constructor() { }\n}\n","export const QueryParameterNames = {\r\n    ReturnUrl: 'returnUrl'\r\n};\r\n\r\nlet appPaths: IAppEndpoints = {\r\n    GetCountries: `lookup/countries`,\r\n    GetTestDescription: `test`,\r\n};\r\n\r\nexport interface IAppEndpoints {\r\n    readonly GetCountries: string;\r\n    readonly GetTestDescription: string;\r\n}\r\n\r\nexport interface IAppRoutes {\r\n    readonly Home: () => any[] | string;\r\n    readonly Skills: () => any[] | string;\r\n    readonly Secret: () => any[] | string;\r\n}\r\n\r\nlet appRoutes: IAppRoutes = {\r\n    Home: () => [`/home`],\r\n    Skills: () => [`/skills`],\r\n    Secret: () => [`/secret`],\r\n};\r\n\r\n\r\nexport const AppEndpoints: IAppEndpoints = appPaths;\r\nexport const AppRoutes: IAppRoutes = appRoutes;\r\n\r\n/* type Initializer<T> = T extends any ? (string | (() => any[])) : never\r\n// type AppRouteType =\r\n\r\nfunction correct<T>(arg: Initializer<T>) : any[] | Initializer<T> {\r\n    return typeof arg === 'function' ? arg() : arg;\r\n}\r\n\r\nlet ans1 = correct(\"true\");\r\nlet ans2 = correct(() => []);\r\nlet ans3 = correct(authRoutes.Login); */","import { InjectionToken } from '@angular/core';\r\n\r\n// readonly Register: () => any[] | string;\r\nexport interface IAppNavigationPaths {\r\n    readonly Home: string;\r\n    readonly Register: string;\r\n    readonly Login: string;\r\n}\r\n\r\nexport interface IAppConfig {\r\n    baseUrl: string;\r\n    getUrl: (url: string) => string;\r\n    navigationPaths: IAppNavigationPaths;\r\n    // primaryMenu: MenuItem[];\r\n    // profileMenu: MenuItem[];\r\n}\r\n\r\nexport const APP_CONFIG_TOKEN = new InjectionToken<IAppConfig>(\"APP_CONFIG_TOKEN\");\r\n\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const USER_STORAGE_KEY_TOKEN = new InjectionToken<string>('USER_STORAGE_KEY_TOKEN', {\r\n    providedIn: 'root',\r\n    factory: () => ''\r\n});","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AppEndpoints } from '../app.constants';\r\nimport { ILookupItem } from '../app.interfaces';\r\nimport { APP_CONFIG_TOKEN, IAppConfig } from '../tokens';\r\n\r\nexport interface Country {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LookupService {\r\n\r\n    constructor(private http: HttpClient, @Inject(APP_CONFIG_TOKEN) private appConfig: IAppConfig) { }\r\n\r\n    public getCountries(): Observable<ILookupItem[]> {\r\n        return this.http.get<ILookupItem[]>(this.appConfig.getUrl(AppEndpoints.GetCountries));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, from, Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n\r\n    private storage: any;\r\n\r\n    constructor() {\r\n        this.storage = localStorage; // localStorage, sessionStorage;\r\n    }\r\n\r\n    saveItem<T>(key: string, item: T) {\r\n        this.storage.setItem(key, JSON.stringify(item));\r\n    }\r\n\r\n    getItem(key: string): any {\r\n        // JSON.parse(null) === null\r\n        // localStorage.getItem(key) === null if cannot find item\r\n        return JSON.parse(this.storage.getItem(key)!);\r\n        /* let item = this.storage.getItem(key);\r\n\r\n        if (item && item !== 'undefined') {\r\n            return JSON.parse(this.storage.getItem(key));\r\n        }\r\n\r\n        return; */\r\n    }\r\n\r\n    removeItem(key: string): void {\r\n        this.storage.removeItem(key);\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AppEndpoints } from '../app.constants';\r\nimport { APP_CONFIG_TOKEN, IAppConfig } from '../tokens';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TestService {\r\n\r\n    constructor(private http: HttpClient, @Inject(APP_CONFIG_TOKEN) private appConfig: IAppConfig) { }\r\n\r\n    getError(): Observable<any> {\r\n        return this.http.get(this.appConfig.getUrl('error/get-error'));\r\n    }\r\n\r\n    getTestDescription(): Observable<string> {\r\n        return this.http.get<string>(this.appConfig.getUrl(AppEndpoints.GetTestDescription)).pipe(\r\n            // shareReplay()\r\n        );\r\n    }\r\n}\r\n","export interface IUser {\r\n    id: string;\r\n    userName: string;\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    token: string;\r\n}\r\n\r\nexport interface IEmptyUser {\r\n    id: string;\r\n}\r\n\r\nexport interface IUserRegistrationReq {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    timeZone: string;\r\n    workHours: string;\r\n    coreHours: string;\r\n}\r\n\r\nexport const EMPTY_USER: IEmptyUser = {\r\n    id: '00000000-0000-0000-0000-000000000000'\r\n};","import { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject, concat, Observable, of } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, switchMap, take, tap } from 'rxjs/operators';\n\nimport { EMPTY_USER, IUser } from '../models';\nimport { USER_STORAGE_KEY_TOKEN } from '../tokens';\nimport { StorageService } from './storage.service';\n\n/**\n * This service is responsible for holding in-memory user data,\n * notifying subscribers when user data changes, and persisting\n * user data to storage.\n *\n * This service makes it possible to remove the dependency on\n * Auth Service and in turn the Authlib.\n */\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserStorageService {\n\n    private _userSubject = new BehaviorSubject<IUser | null>(null);\n\n    constructor(\n        private storage: StorageService,\n        @Inject(USER_STORAGE_KEY_TOKEN) private userStorageKey: string,\n    ) { }\n\n    public getUser(): Observable<IUser | null> {\n        let source$ = concat(\n            this._userSubject.pipe(\n                // take will trigger the `subject` observable\n                // to complete so that the next observable in\n                // concat is subscribed to\n                take(1),\n\n                // filter out null values (false)\n                // convert null to false\n                filter(user => !!user)\n            ),\n\n            // the `of` observable will automatically complete\n            // so the next observable in concate will be\n            // subscribed to\n            of(this.storage.getItem(this.userStorageKey)).pipe(\n                filter(user => !!user),\n\n                // tap(x => console.log('storage => ', x)),\n\n                // we will get here if the value is not null\n                // update the user subject\n                tap(user => this._userSubject.next(user))\n            ),\n            this._userSubject.asObservable()\n        ).pipe(\n            // here to allow distinctUntilKeyChanged to work\n            switchMap(user => of(user ?? EMPTY_USER)),\n            distinctUntilKeyChanged('id'),\n            // transform back to null\n            switchMap(user => of(user.id === EMPTY_USER.id ? null : user))\n        );\n\n        return source$;\n    }\n\n    public setUser(user: IUser | null): void {\n        this._userSubject.next(user);\n    }\n\n    public storeUser(item: IUser) {\n        this.storage.saveItem(this.userStorageKey, item);\n    }\n\n    public removeUser(): void {\n        this.storage.removeItem(this.userStorageKey);\n    }\n\n    public retrieveUser(): IUser | null {\n        return this.storage.getItem(this.userStorageKey);\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { ProblemDetails } from './error.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ErrorDispatcherService {\r\n\r\n    private _unauthenticatedSubject = new Subject<ProblemDetails>();\r\n    private _forbiddenSubject = new Subject<void>();\r\n    private _noConnectionSubject = new Subject<void>();\r\n    private _notFoundSubject = new Subject<void>();\r\n    private _httpErrorSubject = new Subject<ProblemDetails>();\r\n    private _globalErrorSubject = new Subject<any>();\r\n\r\n    constructor() { }\r\n\r\n    get onUnauthenticated$() {\r\n        return this._unauthenticatedSubject.asObservable();\r\n    }\r\n\r\n    get onForbidden$() {\r\n        return this._forbiddenSubject.asObservable();\r\n    }\r\n\r\n    get onNotFound$() {\r\n        return this._notFoundSubject.asObservable();\r\n    }\r\n\r\n    get onNoConnection$() {\r\n        return this._noConnectionSubject.asObservable();\r\n    }\r\n\r\n    get onHttpError$() {\r\n        return this._httpErrorSubject.asObservable();\r\n    }\r\n\r\n    get onGlobalError$() {\r\n        return this._globalErrorSubject.asObservable();\r\n    }\r\n\r\n    notifyUnauthenticated(problem: ProblemDetails) {\r\n        this._unauthenticatedSubject.next(problem);\r\n    }\r\n\r\n    notifyForbidden() {\r\n        this._forbiddenSubject.next();\r\n    }\r\n\r\n    notifyNotFound() {\r\n        this._notFoundSubject.next();\r\n    }\r\n\r\n    notifyNoConnection() {\r\n        this._noConnectionSubject.next();\r\n    }\r\n\r\n    notifyHttpError(problem: ProblemDetails) {\r\n        this._httpErrorSubject.next(problem);\r\n    }\r\n\r\n    notifyGlobalError(error: any) {\r\n        this._globalErrorSubject.next(error);\r\n    }\r\n}\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ObservableInput, throwError } from 'rxjs';\r\nimport { filter, map, take, tap } from 'rxjs/operators';\r\n\r\nimport { UserStorageService } from '../services';\r\nimport { ErrorDispatcherService } from './error-dispatcher.service';\r\nimport { ProblemDetails } from './error.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ErrorHandlerService {\r\n\r\n    constructor(\r\n        private userStorage: UserStorageService,\r\n        private errorDispatcher: ErrorDispatcherService\r\n    ) { }\r\n\r\n    handleError(response: HttpErrorResponse): ObservableInput<any> {\r\n        const problem: ProblemDetails = response.error && response.error as ProblemDetails;\r\n\r\n        this.userStorage.getUser()\r\n            .pipe(\r\n                take(1),\r\n                filter(_ => [401, 403].includes(response.status)),\r\n                map(user => ({ user, status: response.status })),\r\n                tap(x => {\r\n                    if (x.user === null && x.status === 401) {\r\n                        this.errorDispatcher.notifyUnauthenticated(problem);\r\n                        // this.auth.logout();\r\n                        // this.auth.redirectToLogin();\r\n                    }\r\n                    // x.user === null && [401, 403].includes(x.status) && this.auth.redirectToLogin();\r\n                    // x.user === null && [401, 403].includes(x.status) && this.auth.logout();\r\n                }),\r\n                /* tap(x => {\r\n                    x.user !== null && x.status === 401 && this.auth.logout();\r\n                }), */\r\n                tap(x => {\r\n                    if (x.user !== null && x.status === 403) {\r\n                        this.errorDispatcher.notifyForbidden();\r\n                    }\r\n                    /* this.zone.run(() => {\r\n                        (x.user !== null && x.status === 403) && this.alert.warn(\r\n                            'Unauthorized',\r\n                            'Not authorized to peform the action'\r\n                        );\r\n                    }) */\r\n                })\r\n            )\r\n            .subscribe();\r\n\r\n        if (response.status === 0) {\r\n            this.errorDispatcher.notifyNoConnection();\r\n            /* this.alert.error(\r\n                \"No connection\",\r\n                \"Unable to connect to the server. You're probably offline or sever unreachable.\"\r\n            ); */\r\n        }\r\n\r\n\r\n        /* if (this.isProblemDetail(problem)) {\r\n            console.log(problem);\r\n        } */\r\n\r\n        // console.log('problem instanceof ProblemDetails', problem instanceof ProblemDetails);\r\n        /* if (!(problem instanceof ProblemDetails)) {\r\n            console.error('Request does not return a problem detail, find out why');\r\n            console.log(problem);\r\n        } */\r\n\r\n        if (response.status === 404)\r\n            this.errorDispatcher.notifyNotFound();\r\n\r\n        /* [404].includes(response.status) && this.zone.run(() => {\r\n            this.alert.error(\r\n                \"Not found\",\r\n                \"We could not find the resource you requested.\"\r\n            );\r\n        }); */\r\n\r\n        if (![401, 403, 404, 0].includes(response.status)) {\r\n            this.errorDispatcher.notifyHttpError(problem);\r\n        }\r\n\r\n        /* ![401, 403, 404, 0].includes(response.status) && this.zone.run(() => {\r\n            //TODO: ExpressionChangedAfterItHasBeenCheckedError\r\n            // let kkk = this.extractMessages(problem);\r\n            console.log('problem', problem);\r\n\r\n            // this.alert.error(\r\n            //     problem?.title || 'Error',\r\n            //     this.extractMessages(problem) || problem.detail\r\n            // );\r\n        }); */\r\n\r\n        return throwError({\r\n            success: false,\r\n            status: response.status,\r\n            statusText: response.statusText,\r\n            message: response.message,\r\n            error: response.error\r\n        });\r\n    }\r\n\r\n    private isProblemDetail(problem: any) {\r\n        return problem && \"type\" in problem\r\n            && \"title\" in problem\r\n            && \"status\" in problem\r\n            && \"detail\" in problem\r\n            && \"instance\" in problem;\r\n    }\r\n\r\n    private extractMessages(problem: ProblemDetails) {\r\n        return this.isProblemDetail(problem)\r\n            ? (problem?.errors?.map(x => ({ message: x.message })) || problem.detail)\r\n            : 'An error has occured contact the administrator';\r\n    }\r\n}","import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ErrorHandlerService } from './error-handler.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private errorHandler: ErrorHandlerService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(\r\n            catchError(error => this.errorHandler.handleError(error as HttpErrorResponse))\r\n        );\r\n    }\r\n}\r\n","export class ProblemDetails {\r\n    type: string = '';\r\n    title: string = '';\r\n    status: number = -1;\r\n    detail: string = '';\r\n    instance: string = '';\r\n    errors: any[] = [];\r\n}","import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\n\nimport { ErrorDispatcherService } from './error-dispatcher.service';\n\n@Injectable()\nexport class GlobalErrorHandlerService implements ErrorHandler {\n\n    constructor(\n        private errorDispatcher: ErrorDispatcherService\n    ) { }\n\n    handleError(error: any) {\n        console.log('GlobalErrorHandlerService', error);\n        // Check if it's an error from an HTTP response\n        if (!(error instanceof HttpErrorResponse)) {\n            error = error.rejection; // get the error object\n        }\n\n        this.errorDispatcher.notifyGlobalError(error);\n\n        /* this.zone.run(() =>\n            this.alert.error(\n                error?.message || 'Undefined client error',\n                error?.status\n            )\n        ); */\n\n        // console.error('Error from global error handler');\n    }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ErrorHandler, NgModule } from '@angular/core';\r\n\r\nimport { ErrorInterceptor } from './error.interceptor';\r\nimport { GlobalErrorHandlerService } from './global-error-handler.service';\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    providers: [\r\n        {\r\n            provide: ErrorHandler, // processes all errors\r\n            useClass: GlobalErrorHandlerService,\r\n        },\r\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\r\n\r\n        /* {\r\n            provide: ErrorHandler, // processes all errors\r\n            useClass: GlobalErrorHandlerService,\r\n        }, */\r\n        // { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\r\n        // { provide: APP_INITIALIZER, useFactory: authInitializer, multi: true, deps: [AuthService] },\r\n    ],\r\n})\r\nexport class ErrorModule { }\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HttpLoadingInterceptor implements HttpInterceptor {\r\n    // private loadingDialogService: LoadingDialogService\r\n    constructor() { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // console.log('loading...');\r\n        //   this.loadingDialogService.openDialog();\r\n        return next.handle(request).pipe(\r\n            finalize(() => {\r\n                //   this.loadingDialogService.hideDialog();\r\n                // console.log('complete!!!!');\r\n            })\r\n        ) as Observable<HttpEvent<any>>;\r\n    }\r\n}","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ErrorModule } from './error';\nimport { HttpLoadingInterceptor } from './http-loading.interceptor';\nimport { APP_CONFIG_TOKEN, IAppConfig } from './tokens';\nimport { USER_STORAGE_KEY_TOKEN } from './tokens/user-storage-key.token';\n\n// import { ErrorModule } from './error';\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n\n        ErrorModule\n    ],\n    providers: [\n        // { provide: APP_INITIALIZER, useFactory: authInitializer, multi: true, deps: [AuthService] },\n        // { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n        // { provide: UrlSerializer, useClass: CustomUrlSerializer },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: HttpLoadingInterceptor,\n            multi: true,\n        },\n        { provide: USER_STORAGE_KEY_TOKEN, useValue: 'psr-userkey-tlxstgmzna' },\n    ],\n    exports: [\n        HttpClientModule,\n\n        ErrorModule\n    ]\n    // ErrorModule,\n})\nexport class CorelibModule {\n    static withConfig(config: IAppConfig): ModuleWithProviders<CorelibModule> {\n        return {\n            ngModule: CorelibModule,\n            providers: [\n                { provide: APP_CONFIG_TOKEN, useValue: config },\n            ]\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}