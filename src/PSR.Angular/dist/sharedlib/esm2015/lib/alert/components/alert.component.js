import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { AlertType } from '../alert.model';
import * as i0 from "@angular/core";
import * as i1 from "../services/alert.service";
import * as i2 from "@angular/router";
import * as i3 from "@angular/common";
export class AlertComponent {
    constructor(alertService, router) {
        this.alertService = alertService;
        this.router = router;
        this.alert = undefined;
        this.closeAlert = new EventEmitter();
    }
    get isErrorMessagesVisible() {
        var _a;
        return (((_a = this.alert) === null || _a === void 0 ? void 0 : _a.messages.length) || 0) > 0;
    }
    get hasSingleMessage() {
        var _a;
        return (((_a = this.alert) === null || _a === void 0 ? void 0 : _a.messages.length) || 0) === 1;
    }
    ngOnInit() {
        var _a, _b;
        ((_a = this.alert) === null || _a === void 0 ? void 0 : _a.autoClose) && this.startAutoClose();
        switch ((_b = this.alert) === null || _b === void 0 ? void 0 : _b.type) {
            case AlertType.Success:
                this.alertIconRef = this.successIconRef;
                break;
            case AlertType.Error:
                this.alertIconRef = this.errorIconRef;
                break;
            case AlertType.Info:
                this.alertIconRef = this.infoIconRef;
                break;
            case AlertType.Warning:
                this.alertIconRef = this.warningIconRef;
                break;
            default:
                throw new Error('Invalid alert type');
        }
    }
    ngAfterViewInit() {
    }
    onAction(action) {
        this.router.navigate([action.route]);
        this.startAutoClose();
    }
    onCloseAlert() {
        var _a;
        this.closeAlert.emit(true);
        this.alertService.closeAlert((_a = this.alert) === null || _a === void 0 ? void 0 : _a.id);
    }
    startAutoClose() {
        var _a;
        this._timeout = setTimeout(() => {
            this.onCloseAlert();
        }, (((_a = this.alert) === null || _a === void 0 ? void 0 : _a.timeToClose) || 0) * 1000);
    }
    cssClass() {
        const alertType = this.alert ? this.alert.type : AlertType.Info;
        const classes = ['flex items-end flex-1 max-w-sm pointer-events-none sm:items-start'];
        const alertTypeClass = {
            [AlertType.Success]: 'alert--success',
            [AlertType.Error]: 'alert--error',
            [AlertType.Info]: 'alert--info',
            [AlertType.Warning]: 'alert--warning',
        };
        classes.push(alertTypeClass[alertType]);
        return classes.join(' ');
    }
    hasActions() {
        var _a;
        return !!((_a = this.alert) === null || _a === void 0 ? void 0 : _a.actions) && this.alert.actions.length > 0;
    }
    ngOnDestroy() {
        clearTimeout(this._timeout);
    }
}
AlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: AlertComponent, deps: [{ token: i1.AlertService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component });
AlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.11", type: AlertComponent, selector: "app-alert", inputs: { alert: "alert" }, outputs: { closeAlert: "closeAlert" }, viewQueries: [{ propertyName: "successIconRef", first: true, predicate: ["successIcon"], descendants: true, read: TemplateRef }, { propertyName: "errorIconRef", first: true, predicate: ["errorIcon"], descendants: true, read: TemplateRef }, { propertyName: "infoIconRef", first: true, predicate: ["infoIcon"], descendants: true, read: TemplateRef }, { propertyName: "warningIconRef", first: true, predicate: ["warningIcon"], descendants: true, read: TemplateRef }], ngImport: i0, template: "<div *ngIf=\"alert\" aria-live=\"assertive\" class=\"{{ cssClass() }}\">\r\n    <!-- <div class=\"flex flex-col items-center w-full space-y-4 sm:items-end\"> -->\r\n    <div class=\"flex flex-col items-center w-full max-w-sm space-y-4 sm:items-end\">\r\n        <!-- w-full max-w-sm overflow-hidden bg-red-900 rounded-lg shadow-lg pointer-events-auto ring-1 ring-black ring-opacity-10 -->\r\n        <div class=\"alert__wrapper\">\r\n            <div class=\"p-4\">\r\n                <div class=\"flex items-start\">\r\n                    <div class=\"flex-shrink-0\">\r\n                        <ng-container *ngIf=\"alertIconRef\">\r\n                            <ng-container *ngTemplateOutlet=\"alertIconRef\"></ng-container>\r\n                        </ng-container>\r\n                        <!-- <ng-container *ngIf=\"alert?.type\" [ngSwitch]=\"alert?.type\">\r\n                            <ng-container *ngSwitchCase=\"0\" [ngTemplateOutlet]=\"successIcon\"></ng-container>\r\n                            <ng-container *ngSwitchCase=\"1\" [ngTemplateOutlet]=\"errorIcon\"></ng-container>\r\n                            <ng-container *ngSwitchCase=\"2\" [ngTemplateOutlet]=\"infoIcon\"></ng-container>\r\n                            <ng-container *ngSwitchCase=\"3\" [ngTemplateOutlet]=\"warningIcon\"></ng-container>\r\n                        </ng-container> -->\r\n                    </div>\r\n                    <div class=\"ml-3 w-0 flex-1 pt-0.5\">\r\n                        <p class=\"alert__title\">\r\n                            <!-- text-sm font-medium text-white -->\r\n                            {{alert?.title}}\r\n                        </p>\r\n\r\n                        <ul *ngIf=\"isErrorMessagesVisible\" role=\"list\" class=\"alert__messages\">\r\n                            <ng-container *ngIf=\"hasSingleMessage; then singleMessage else multiMessage\"></ng-container>\r\n                        </ul>\r\n                        <ng-template #singleMessage>\r\n                            <p class=\"alert__message\">{{alert?.messages![0].message}}</p>\r\n                        </ng-template>\r\n                        <ng-template #multiMessage>\r\n                            <li *ngFor=\"let item of alert?.messages\" class=\"alert__message-item\">\r\n                                <p class=\"alert__message\">{{item?.message}}</p>\r\n                            </li>\r\n                        </ng-template>\r\n                        <div *ngIf=\"hasActions()\" class=\"flex mt-3 space-x-7\">\r\n                            <!-- text-sm font-medium text-white bg-transparent rounded-md hover:text-red-200 focus:outline-none -->\r\n                            <button *ngFor=\"let action of alert?.actions\" (click)=\"onAction(action)\" type=\"button\"\r\n                                    class=\"alert__btn-action\">\r\n                                {{action.name}}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex flex-shrink-0 ml-4\">\r\n                        <button (click)=\"onCloseAlert()\" class=\"alert__btn-close\">\r\n                            <span class=\"sr-only\">Close</span>\r\n                            <!-- Heroicon name: solid/x -->\r\n                            <svg class=\"w-5 h-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"\r\n                                 fill=\"currentColor\" aria-hidden=\"true\">\r\n                                <path fill-rule=\"evenodd\"\r\n                                      d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\r\n                                      clip-rule=\"evenodd\" />\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #successIcon>\r\n    <svg class=\"w-6 h-6 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\r\n         stroke=\"currentColor\" aria-hidden=\"true\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n    </svg>\r\n</ng-template>\r\n<ng-template #errorIcon>\r\n    <svg class=\"w-6 h-6 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\r\n         stroke=\"currentColor\" aria-hidden=\"true\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n    </svg>\r\n</ng-template>\r\n<ng-template #infoIcon>\r\n    <svg class=\"w-6 h-6 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\r\n         stroke=\"currentColor\" aria-hidden=\"true\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n    </svg>\r\n</ng-template>\r\n<ng-template #warningIcon>\r\n    <svg class=\"w-6 h-6 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\r\n         stroke=\"currentColor\" aria-hidden=\"true\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\">\r\n        </path>\r\n    </svg>\r\n</ng-template>\r\n", styles: [":host{@apply flex-auto w-full mb-4;}.alert__wrapper{@apply w-full max-w-sm overflow-hidden rounded-lg;@apply shadow-lg pointer-events-auto ring-1 ring-black ring-opacity-10;}.alert__title{@apply text-sm font-medium;}.alert__message{@apply mt-1 text-sm;}.alert__btn-action{@apply text-sm font-medium rounded-md focus:outline-none;}.alert__btn-close{@apply inline-flex rounded-md focus:outline-none;}.alert--error .alert__wrapper{@apply bg-red-900;}.alert--error .alert__title{@apply text-white;}.alert--error .alert__message{@apply text-red-200;}.alert--error .alert__message-item{@apply py-2;}.alert--error .alert__messages{@apply mt-2 divide-y divide-black divide-opacity-10;}.alert--error .alert__btn-action{@apply text-white bg-transparent hover:text-red-200;}.alert--error .alert__btn-close{@apply text-red-100 bg-red-900 hover:text-white;}.alert--info .alert__wrapper{@apply bg-blue-600;}.alert--info .alert__title{@apply text-white;}.alert--info .alert__message{@apply text-blue-200;}.alert--info .alert__message-item{@apply py-2;}.alert--info .alert__messages{@apply mt-2 divide-y divide-black divide-opacity-10;}.alert--info .alert__btn-action{@apply text-white bg-transparent hover:text-blue-200;}.alert--info .alert__btn-close{@apply text-blue-100 bg-blue-600 hover:text-white;}.alert--success .alert__wrapper{@apply bg-green-600;}.alert--success .alert__title{@apply text-white;}.alert--success .alert__message{@apply text-green-200;}.alert--success .alert__message-item{@apply py-2;}.alert--success .alert__messages{@apply mt-2 divide-y divide-black divide-opacity-10;}.alert--success .alert__btn-action{@apply text-white bg-transparent hover:text-green-200;}.alert--success .alert__btn-close{@apply text-green-100 bg-green-600 hover:text-white;}.alert--warning .alert__wrapper{@apply bg-yellow-600;}.alert--warning .alert__title{@apply text-white;}.alert--warning .alert__message{@apply text-yellow-200;}.alert--warning .alert__message-item{@apply py-2;}.alert--warning .alert__messages{@apply mt-2 divide-y divide-black divide-opacity-10;}.alert--warning .alert__btn-action{@apply text-white bg-transparent hover:text-yellow-200;}.alert--warning .alert__btn-close{@apply text-yellow-100 bg-yellow-600 hover:text-white;}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: AlertComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-alert',
                    templateUrl: './alert.component.html',
                    styleUrls: ['./alert.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.AlertService }, { type: i2.Router }]; }, propDecorators: { alert: [{
                type: Input
            }], closeAlert: [{
                type: Output
            }], successIconRef: [{
                type: ViewChild,
                args: ['successIcon', { read: TemplateRef }]
            }], errorIconRef: [{
                type: ViewChild,
                args: ['errorIcon', { read: TemplateRef }]
            }], infoIconRef: [{
                type: ViewChild,
                args: ['infoIcon', { read: TemplateRef }]
            }], warningIconRef: [{
                type: ViewChild,
                args: ['warningIcon', { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,