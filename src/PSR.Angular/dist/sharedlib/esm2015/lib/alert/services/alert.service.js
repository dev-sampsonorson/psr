import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { Alert, AlertType } from '../alert.model';
import { ALERT_CONFIG_TOKEN } from '../tokens/alert-config.token';
import * as i0 from "@angular/core";
import * as i1 from "../../services";
// import { Alert, AlertType, IAlertAction, IAlertOptions, IMessageItem } from '@shared/alert';
export class AlertService {
    constructor(
    // private env: EnvironmentService,
    util, alertConfig) {
        this.util = util;
        this.alertConfig = alertConfig;
        this._subject = new Subject();
        this._onCloseSubject = new Subject();
        this._defaultId = 'default-alert';
    }
    success(title, messages, actions = [], options = this.alertConfig) {
        return this.sendAlert(new Alert(Object.assign(Object.assign({}, options), { type: AlertType.Success, title, messages: this.util.isString(messages) ? [{ message: messages }] : messages, actions })));
    }
    error(title, messages, actions = [], options = this.alertConfig) {
        return this.sendAlert(new Alert(Object.assign(Object.assign({}, options), { type: AlertType.Error, title, messages: this.util.isString(messages) ? [{ message: messages }] : messages, actions })));
    }
    info(title, messages, actions = [], options = this.alertConfig) {
        return this.sendAlert(new Alert(Object.assign(Object.assign({}, options), { type: AlertType.Info, title, messages: this.util.isString(messages) ? [{ message: messages }] : messages, actions })));
    }
    warn(title, messages, actions = [], options = this.alertConfig) {
        return this.sendAlert(new Alert(Object.assign(Object.assign({}, options), { type: AlertType.Warning, title, messages: this.util.isString(messages) ? [{ message: messages }] : messages, actions })));
    }
    sendAlert(alert) {
        alert.id = alert.id || Symbol('alert');
        //TODO: ExpressionChangedAfterItHasBeenCheckedError
        this._subject.next(alert);
        return alert.id;
    }
    closeAlert(alertSymbol) {
        this._onCloseSubject.next(alertSymbol);
    }
    onAlert() {
        return this._subject.asObservable();
    }
    onCloseAlert(alertSymbol) {
        return this._onCloseSubject.asObservable().pipe(filter(x => x === alertSymbol));
    }
}
AlertService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: AlertService, deps: [{ token: i1.UtilService }, { token: ALERT_CONFIG_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable });
AlertService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: AlertService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: AlertService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UtilService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [ALERT_CONFIG_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NoYXJlZGxpYi90ZW1wL3NyYy9saWIvYWxlcnQvc2VydmljZXMvYWxlcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUd4QyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBNkMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7O0FBRWxFLCtGQUErRjtBQUUvRixNQUFNLE9BQU8sWUFBWTtJQU1yQjtJQUNJLG1DQUFtQztJQUMzQixJQUFpQixFQUNXLFdBQTBCO1FBRHRELFNBQUksR0FBSixJQUFJLENBQWE7UUFDVyxnQkFBVyxHQUFYLFdBQVcsQ0FBZTtRQVAxRCxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVMsQ0FBQztRQUNoQyxvQkFBZSxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7UUFDeEMsZUFBVSxHQUFHLGVBQWUsQ0FBQztJQU1qQyxDQUFDO0lBRUwsT0FBTyxDQUFDLEtBQWEsRUFBRSxRQUFpQyxFQUFFLFVBQTBCLEVBQUUsRUFBRSxVQUF5QixJQUFJLENBQUMsV0FBVztRQUM3SCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLGlDQUN4QixPQUFPLEtBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQ3ZCLEtBQUssRUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLFFBQTJCLEVBQ3pHLE9BQU8sSUFDVCxDQUFDLENBQUM7SUFDUixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQWEsRUFBRSxRQUFpQyxFQUFFLFVBQTBCLEVBQUUsRUFBRSxVQUF5QixJQUFJLENBQUMsV0FBVztRQUMzSCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLGlDQUN4QixPQUFPLEtBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQ3JCLEtBQUssRUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLFFBQTJCLEVBQ3pHLE9BQU8sSUFDVCxDQUFDLENBQUM7SUFDUixDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQWEsRUFBRSxRQUFpQyxFQUFFLFVBQTBCLEVBQUUsRUFBRSxVQUF5QixJQUFJLENBQUMsV0FBVztRQUMxSCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLGlDQUN4QixPQUFPLEtBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQ3BCLEtBQUssRUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLFFBQTJCLEVBQ3pHLE9BQU8sSUFDVCxDQUFDLENBQUM7SUFDUixDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQWEsRUFBRSxRQUFpQyxFQUFFLFVBQTBCLEVBQUUsRUFBRSxVQUF5QixJQUFJLENBQUMsV0FBVztRQUMxSCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLGlDQUN4QixPQUFPLEtBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQ3ZCLEtBQUssRUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLFFBQTJCLEVBQ3pHLE9BQU8sSUFDVCxDQUFDLENBQUM7SUFDUixDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQVk7UUFDbEIsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV2QyxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxVQUFVLENBQUMsV0FBbUI7UUFDMUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELFlBQVksQ0FBQyxXQUFtQjtRQUM1QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7OzBHQXRFUSxZQUFZLDZDQVNULGtCQUFrQjs4R0FUckIsWUFBWTs0RkFBWixZQUFZO2tCQUR4QixVQUFVOzswQkFVRixNQUFNOzJCQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IFV0aWxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMnO1xyXG5pbXBvcnQgeyBBbGVydCwgQWxlcnRUeXBlLCBJQWxlcnRBY3Rpb24sIElBbGVydE9wdGlvbnMsIElNZXNzYWdlSXRlbSB9IGZyb20gJy4uL2FsZXJ0Lm1vZGVsJztcclxuaW1wb3J0IHsgQUxFUlRfQ09ORklHX1RPS0VOIH0gZnJvbSAnLi4vdG9rZW5zL2FsZXJ0LWNvbmZpZy50b2tlbic7XHJcblxyXG4vLyBpbXBvcnQgeyBBbGVydCwgQWxlcnRUeXBlLCBJQWxlcnRBY3Rpb24sIElBbGVydE9wdGlvbnMsIElNZXNzYWdlSXRlbSB9IGZyb20gJ0BzaGFyZWQvYWxlcnQnO1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBbGVydFNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgX3N1YmplY3QgPSBuZXcgU3ViamVjdDxBbGVydD4oKTtcclxuICAgIHByaXZhdGUgX29uQ2xvc2VTdWJqZWN0ID0gbmV3IFN1YmplY3Q8U3ltYm9sPigpO1xyXG4gICAgcHJpdmF0ZSBfZGVmYXVsdElkID0gJ2RlZmF1bHQtYWxlcnQnO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8vIHByaXZhdGUgZW52OiBFbnZpcm9ubWVudFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB1dGlsOiBVdGlsU2VydmljZSxcclxuICAgICAgICBASW5qZWN0KEFMRVJUX0NPTkZJR19UT0tFTikgcHJpdmF0ZSBhbGVydENvbmZpZzogSUFsZXJ0T3B0aW9uc1xyXG4gICAgKSB7IH1cclxuXHJcbiAgICBzdWNjZXNzKHRpdGxlOiBzdHJpbmcsIG1lc3NhZ2VzOiBJTWVzc2FnZUl0ZW1bXSB8IHN0cmluZywgYWN0aW9uczogSUFsZXJ0QWN0aW9uW10gPSBbXSwgb3B0aW9uczogSUFsZXJ0T3B0aW9ucyA9IHRoaXMuYWxlcnRDb25maWcpOiBTeW1ib2wge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRBbGVydChuZXcgQWxlcnQoe1xyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICB0eXBlOiBBbGVydFR5cGUuU3VjY2VzcyxcclxuICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VzOiB0aGlzLnV0aWwuaXNTdHJpbmcobWVzc2FnZXMpID8gW3sgbWVzc2FnZTogbWVzc2FnZXMgYXMgc3RyaW5nIH1dIDogKG1lc3NhZ2VzIGFzIElNZXNzYWdlSXRlbVtdKSxcclxuICAgICAgICAgICAgYWN0aW9uc1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBlcnJvcih0aXRsZTogc3RyaW5nLCBtZXNzYWdlczogSU1lc3NhZ2VJdGVtW10gfCBzdHJpbmcsIGFjdGlvbnM6IElBbGVydEFjdGlvbltdID0gW10sIG9wdGlvbnM6IElBbGVydE9wdGlvbnMgPSB0aGlzLmFsZXJ0Q29uZmlnKTogU3ltYm9sIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kQWxlcnQobmV3IEFsZXJ0KHtcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgdHlwZTogQWxlcnRUeXBlLkVycm9yLFxyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgICAgbWVzc2FnZXM6IHRoaXMudXRpbC5pc1N0cmluZyhtZXNzYWdlcykgPyBbeyBtZXNzYWdlOiBtZXNzYWdlcyBhcyBzdHJpbmcgfV0gOiAobWVzc2FnZXMgYXMgSU1lc3NhZ2VJdGVtW10pLFxyXG4gICAgICAgICAgICBhY3Rpb25zXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGluZm8odGl0bGU6IHN0cmluZywgbWVzc2FnZXM6IElNZXNzYWdlSXRlbVtdIHwgc3RyaW5nLCBhY3Rpb25zOiBJQWxlcnRBY3Rpb25bXSA9IFtdLCBvcHRpb25zOiBJQWxlcnRPcHRpb25zID0gdGhpcy5hbGVydENvbmZpZyk6IFN5bWJvbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEFsZXJ0KG5ldyBBbGVydCh7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHR5cGU6IEFsZXJ0VHlwZS5JbmZvLFxyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgICAgbWVzc2FnZXM6IHRoaXMudXRpbC5pc1N0cmluZyhtZXNzYWdlcykgPyBbeyBtZXNzYWdlOiBtZXNzYWdlcyBhcyBzdHJpbmcgfV0gOiAobWVzc2FnZXMgYXMgSU1lc3NhZ2VJdGVtW10pLFxyXG4gICAgICAgICAgICBhY3Rpb25zXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHdhcm4odGl0bGU6IHN0cmluZywgbWVzc2FnZXM6IElNZXNzYWdlSXRlbVtdIHwgc3RyaW5nLCBhY3Rpb25zOiBJQWxlcnRBY3Rpb25bXSA9IFtdLCBvcHRpb25zOiBJQWxlcnRPcHRpb25zID0gdGhpcy5hbGVydENvbmZpZyk6IFN5bWJvbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEFsZXJ0KG5ldyBBbGVydCh7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIHR5cGU6IEFsZXJ0VHlwZS5XYXJuaW5nLFxyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgICAgbWVzc2FnZXM6IHRoaXMudXRpbC5pc1N0cmluZyhtZXNzYWdlcykgPyBbeyBtZXNzYWdlOiBtZXNzYWdlcyBhcyBzdHJpbmcgfV0gOiAobWVzc2FnZXMgYXMgSU1lc3NhZ2VJdGVtW10pLFxyXG4gICAgICAgICAgICBhY3Rpb25zXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbmRBbGVydChhbGVydDogQWxlcnQpOiBTeW1ib2wge1xyXG4gICAgICAgIGFsZXJ0LmlkID0gYWxlcnQuaWQgfHwgU3ltYm9sKCdhbGVydCcpO1xyXG5cclxuICAgICAgICAvL1RPRE86IEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3JcclxuICAgICAgICB0aGlzLl9zdWJqZWN0Lm5leHQoYWxlcnQpO1xyXG4gICAgICAgIHJldHVybiBhbGVydC5pZDtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZUFsZXJ0KGFsZXJ0U3ltYm9sOiBTeW1ib2wpIHtcclxuICAgICAgICB0aGlzLl9vbkNsb3NlU3ViamVjdC5uZXh0KGFsZXJ0U3ltYm9sKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkFsZXJ0KCk6IE9ic2VydmFibGU8QWxlcnQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsb3NlQWxlcnQoYWxlcnRTeW1ib2w6IFN5bWJvbCk6IE9ic2VydmFibGU8U3ltYm9sPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uQ2xvc2VTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpLnBpcGUoZmlsdGVyKHggPT4geCA9PT0gYWxlcnRTeW1ib2wpKTtcclxuICAgIH1cclxufVxyXG4iXX0=